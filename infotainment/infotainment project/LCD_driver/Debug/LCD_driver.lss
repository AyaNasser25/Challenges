
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f4  00800060  000009c0  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800154  00800154  00000b48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ca3  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1a  00000000  00000000  0000295f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ced  00000000  00000000  00003379  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00004068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000562  00000000  00000000  000042dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000128e  00000000  00000000  0000483e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005acc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 35       	cpi	r26, 0x54	; 84
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e5       	ldi	r26, 0x54	; 84
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 35       	cpi	r26, 0x56	; 86
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 04 	call	0x81e	; 0x81e <main>
  8a:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:

void question_mark(uint8 row,uint8 col)
{
	uint8 question_arr[8]={0, 0, 3, 3, 31, 31, 31};
	LCD_customCharacter(question_arr,3,3,row,col);
}
  92:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_init>
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
  a6:	08 95       	ret

000000a8 <smile_character>:
  a8:	0f 93       	push	r16
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	28 97       	sbiw	r28, 0x08	; 8
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	fe 01       	movw	r30, r28
  c0:	31 96       	adiw	r30, 0x01	; 1
  c2:	98 e0       	ldi	r25, 0x08	; 8
  c4:	df 01       	movw	r26, r30
  c6:	1d 92       	st	X+, r1
  c8:	9a 95       	dec	r25
  ca:	e9 f7       	brne	.-6      	; 0xc6 <smile_character+0x1e>
  cc:	9a e0       	ldi	r25, 0x0A	; 10
  ce:	9a 83       	std	Y+2, r25	; 0x02
  d0:	91 e1       	ldi	r25, 0x11	; 17
  d2:	9d 83       	std	Y+5, r25	; 0x05
  d4:	9e e0       	ldi	r25, 0x0E	; 14
  d6:	9e 83       	std	Y+6, r25	; 0x06
  d8:	06 2f       	mov	r16, r22
  da:	28 2f       	mov	r18, r24
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	cf 01       	movw	r24, r30
  e2:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_customCharacter>
  e6:	28 96       	adiw	r28, 0x08	; 8
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	0f 91       	pop	r16
  f8:	08 95       	ret

000000fa <sad_character>:
  fa:	0f 93       	push	r16
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	28 97       	sbiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	fe 01       	movw	r30, r28
 112:	31 96       	adiw	r30, 0x01	; 1
 114:	98 e0       	ldi	r25, 0x08	; 8
 116:	df 01       	movw	r26, r30
 118:	1d 92       	st	X+, r1
 11a:	9a 95       	dec	r25
 11c:	e9 f7       	brne	.-6      	; 0x118 <sad_character+0x1e>
 11e:	9a e0       	ldi	r25, 0x0A	; 10
 120:	9a 83       	std	Y+2, r25	; 0x02
 122:	9e e0       	ldi	r25, 0x0E	; 14
 124:	9d 83       	std	Y+5, r25	; 0x05
 126:	91 e1       	ldi	r25, 0x11	; 17
 128:	9e 83       	std	Y+6, r25	; 0x06
 12a:	06 2f       	mov	r16, r22
 12c:	28 2f       	mov	r18, r24
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	cf 01       	movw	r24, r30
 134:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <LCD_customCharacter>
 138:	28 96       	adiw	r28, 0x08	; 8
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <questions>:
/* Function job :- to display questions                                                                    */
/* Function inputs :-strings of question number and type                                                   */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/
void questions(uint8 *ques_num,uint8 *ques_type)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	eb 01       	movw	r28, r22
	LCD_displayStringRowColumn(ques_num,2,1);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	87 ea       	ldi	r24, 0xA7	; 167
 15e:	91 e6       	ldi	r25, 0x61	; 97
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <questions+0x14>
 168:	00 c0       	rjmp	.+0      	; 0x16a <questions+0x1e>
 16a:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
 16c:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
	LCD_displayStringRowColumn(ques_type,1,0);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	ce 01       	movw	r24, r28
 176:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("0-yes",2,0);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("1-no",2,9);
 186:	49 e0       	ldi	r20, 0x09	; 9
 188:	62 e0       	ldi	r22, 0x02	; 2
 18a:	86 e6       	ldi	r24, 0x66	; 102
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <get_answer>:
/* Function job :- determine correct answer                                                                */
/* Function inputs :-correct button                                                                        */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/
void get_answer(uint8 correct_but)
{
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	/* loop until any button pressed */
	while(( !(DIO_ReadPin(but0)) && !(DIO_ReadPin(but1)) ) );
 19c:	84 e1       	ldi	r24, 0x14	; 20
 19e:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_ReadPin>
 1a2:	81 11       	cpse	r24, r1
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <get_answer+0x18>
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_ReadPin>
 1ac:	88 23       	and	r24, r24
 1ae:	b1 f3       	breq	.-20     	; 0x19c <get_answer+0x4>
	/* determine answer type */
	if(DIO_ReadPin(correct_but))
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 a4 01 	call	0x348	; 0x348 <DIO_ReadPin>
 1b6:	88 23       	and	r24, r24
 1b8:	d9 f0       	breq	.+54     	; 0x1f0 <get_answer+0x58>
	{
		LCD_clear();
 1ba:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
		LCD_displayStringRowColumn("correct ",2,2);
 1be:	42 e0       	ldi	r20, 0x02	; 2
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	8b e6       	ldi	r24, 0x6B	; 107
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
		smile_character(2,12);
 1ca:	6c e0       	ldi	r22, 0x0C	; 12
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	0e 94 54 00 	call	0xa8	; 0xa8 <smile_character>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	83 ed       	ldi	r24, 0xD3	; 211
 1d6:	90 e3       	ldi	r25, 0x30	; 48
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <get_answer+0x40>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <get_answer+0x4a>
 1e2:	00 00       	nop
		_delay_ms(1000);
		correct ++;
 1e4:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <correct>
 1e8:	8f 5f       	subi	r24, 0xFF	; 255
 1ea:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <correct>
 1ee:	1a c0       	rjmp	.+52     	; 0x224 <get_answer+0x8c>
	}
	else
	{
		LCD_clear();
 1f0:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
		LCD_displayStringRowColumn("wrong ",2,2);
 1f4:	42 e0       	ldi	r20, 0x02	; 2
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	84 e7       	ldi	r24, 0x74	; 116
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
		sad_character(2,12);
 200:	6c e0       	ldi	r22, 0x0C	; 12
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	0e 94 7d 00 	call	0xfa	; 0xfa <sad_character>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	83 ed       	ldi	r24, 0xD3	; 211
 20c:	90 e3       	ldi	r25, 0x30	; 48
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <get_answer+0x76>
 216:	00 c0       	rjmp	.+0      	; 0x218 <get_answer+0x80>
 218:	00 00       	nop
		_delay_ms(1000);
		wrong++;
 21a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
	}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <DIO_WritePin>:
********************************************************************************************************/


void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	/* according to pin number calculate the corresponding port to write in */
	if(PinNum >= PORTA_START && PinNum <=PORTA_END){
 228:	88 30       	cpi	r24, 0x08	; 8
 22a:	00 f5       	brcc	.+64     	; 0x26c <DIO_WritePin+0x44>
		switch(PinValue){
 22c:	66 23       	and	r22, r22
 22e:	81 f0       	breq	.+32     	; 0x250 <DIO_WritePin+0x28>
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <DIO_WritePin+0xe>
 234:	88 c0       	rjmp	.+272    	; 0x346 <DIO_WritePin+0x11e>
			case 1 : Set_Bit(PORTA,PinNum);
 236:	4b b3       	in	r20, 0x1b	; 27
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_WritePin+0x1c>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	8a 95       	dec	r24
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_WritePin+0x18>
 248:	cb 01       	movw	r24, r22
 24a:	84 2b       	or	r24, r20
 24c:	8b bb       	out	0x1b, r24	; 27
			break;
 24e:	08 95       	ret
			case 0 : Clear_Bit(PORTA,PinNum);
 250:	4b b3       	in	r20, 0x1b	; 27
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WritePin+0x36>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WritePin+0x32>
 262:	cb 01       	movw	r24, r22
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8b bb       	out	0x1b, r24	; 27
			break;
 26a:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >= PORTB_START && PinNum <= PORTB_END){
 26c:	98 ef       	ldi	r25, 0xF8	; 248
 26e:	98 0f       	add	r25, r24
 270:	98 30       	cpi	r25, 0x08	; 8
 272:	08 f5       	brcc	.+66     	; 0x2b6 <DIO_WritePin+0x8e>
		switch(PinValue){
 274:	66 23       	and	r22, r22
 276:	81 f0       	breq	.+32     	; 0x298 <DIO_WritePin+0x70>
 278:	61 30       	cpi	r22, 0x01	; 1
 27a:	09 f0       	breq	.+2      	; 0x27e <DIO_WritePin+0x56>
 27c:	64 c0       	rjmp	.+200    	; 0x346 <DIO_WritePin+0x11e>
			case 1 : Set_Bit(PORTB,(PinNum-PORTB_START));
 27e:	48 b3       	in	r20, 0x18	; 24
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	b9 01       	movw	r22, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_WritePin+0x64>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	9a 95       	dec	r25
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_WritePin+0x60>
 290:	cb 01       	movw	r24, r22
 292:	84 2b       	or	r24, r20
 294:	88 bb       	out	0x18, r24	; 24
			break;
 296:	08 95       	ret
			case 0 : Clear_Bit(PORTB,(PinNum-PORTB_START));
 298:	48 b3       	in	r20, 0x18	; 24
 29a:	88 50       	subi	r24, 0x08	; 8
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_WritePin+0x80>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_WritePin+0x7c>
 2ac:	cb 01       	movw	r24, r22
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	88 bb       	out	0x18, r24	; 24
			break;
 2b4:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >= PORTC_START && PinNum <= PORTC_END){
 2b6:	90 ef       	ldi	r25, 0xF0	; 240
 2b8:	98 0f       	add	r25, r24
 2ba:	98 30       	cpi	r25, 0x08	; 8
 2bc:	08 f5       	brcc	.+66     	; 0x300 <DIO_WritePin+0xd8>
		switch(PinValue){
 2be:	66 23       	and	r22, r22
 2c0:	81 f0       	breq	.+32     	; 0x2e2 <DIO_WritePin+0xba>
 2c2:	61 30       	cpi	r22, 0x01	; 1
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <DIO_WritePin+0xa0>
 2c6:	3f c0       	rjmp	.+126    	; 0x346 <DIO_WritePin+0x11e>
			case HIGH : Set_Bit(PORTC,(PinNum-PORTC_START));
 2c8:	45 b3       	in	r20, 0x15	; 21
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_WritePin+0xae>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	9a 95       	dec	r25
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_WritePin+0xaa>
 2da:	cb 01       	movw	r24, r22
 2dc:	84 2b       	or	r24, r20
 2de:	85 bb       	out	0x15, r24	; 21
			break;
 2e0:	08 95       	ret
			case LOW : Clear_Bit(PORTC,(PinNum-PORTC_START));
 2e2:	45 b3       	in	r20, 0x15	; 21
 2e4:	80 51       	subi	r24, 0x10	; 16
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_WritePin+0xca>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_WritePin+0xc6>
 2f6:	cb 01       	movw	r24, r22
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	85 bb       	out	0x15, r24	; 21
			break;
 2fe:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >= PORTD_START && PinNum <= PORTD_END){
 300:	98 ee       	ldi	r25, 0xE8	; 232
 302:	98 0f       	add	r25, r24
 304:	98 30       	cpi	r25, 0x08	; 8
 306:	f8 f4       	brcc	.+62     	; 0x346 <DIO_WritePin+0x11e>
		switch(PinValue){
 308:	66 23       	and	r22, r22
 30a:	79 f0       	breq	.+30     	; 0x32a <DIO_WritePin+0x102>
 30c:	61 30       	cpi	r22, 0x01	; 1
 30e:	d9 f4       	brne	.+54     	; 0x346 <DIO_WritePin+0x11e>
			case HIGH : Set_Bit(PORTD,(PinNum- PORTD_START));
 310:	42 b3       	in	r20, 0x12	; 18
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_WritePin+0xf6>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	9a 95       	dec	r25
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_WritePin+0xf2>
 322:	cb 01       	movw	r24, r22
 324:	84 2b       	or	r24, r20
 326:	82 bb       	out	0x12, r24	; 18
			break;
 328:	08 95       	ret
			case LOW : Clear_Bit(PORTD,(PinNum-PORTD_START));
 32a:	42 b3       	in	r20, 0x12	; 18
 32c:	88 51       	subi	r24, 0x18	; 24
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_WritePin+0x112>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_WritePin+0x10e>
 33e:	cb 01       	movw	r24, r22
 340:	80 95       	com	r24
 342:	84 23       	and	r24, r20
 344:	82 bb       	out	0x12, r24	; 18
 346:	08 95       	ret

00000348 <DIO_ReadPin>:
* Function name :- DIO_ReadPin                                                                          *
* function job :- Read value from pin of micro controller                                               *
* function arguments :- pin number                                                                      *
* function return :-            N/A                                                                     *
********************************************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum){
 348:	98 2f       	mov	r25, r24
	/* according to pin number calculate the corresponding port to read from */
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
 34a:	88 30       	cpi	r24, 0x08	; 8
 34c:	60 f4       	brcc	.+24     	; 0x366 <DIO_ReadPin+0x1e>
		return (Get_Bit(PINA,PinNum));
 34e:	49 b3       	in	r20, 0x19	; 25
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	b9 01       	movw	r22, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_ReadPin+0x14>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	8a 95       	dec	r24
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_ReadPin+0x10>
 360:	cb 01       	movw	r24, r22
 362:	84 23       	and	r24, r20
 364:	08 95       	ret
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 366:	88 ef       	ldi	r24, 0xF8	; 248
 368:	89 0f       	add	r24, r25
 36a:	88 30       	cpi	r24, 0x08	; 8
 36c:	60 f4       	brcc	.+24     	; 0x386 <DIO_ReadPin+0x3e>
		return (Get_Bit(PINB,(PinNum-PORTB_START)));
 36e:	46 b3       	in	r20, 0x16	; 22
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	b9 01       	movw	r22, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_ReadPin+0x34>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	8a 95       	dec	r24
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_ReadPin+0x30>
 380:	cb 01       	movw	r24, r22
 382:	84 23       	and	r24, r20
 384:	08 95       	ret
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
 386:	80 ef       	ldi	r24, 0xF0	; 240
 388:	89 0f       	add	r24, r25
 38a:	88 30       	cpi	r24, 0x08	; 8
 38c:	60 f4       	brcc	.+24     	; 0x3a6 <DIO_ReadPin+0x5e>
		return (Get_Bit(PINC,(PinNum-PORTC_START)));
 38e:	43 b3       	in	r20, 0x13	; 19
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_ReadPin+0x54>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_ReadPin+0x50>
 3a0:	cb 01       	movw	r24, r22
 3a2:	84 23       	and	r24, r20
 3a4:	08 95       	ret
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 3a6:	88 ee       	ldi	r24, 0xE8	; 232
 3a8:	89 0f       	add	r24, r25
 3aa:	88 30       	cpi	r24, 0x08	; 8
 3ac:	60 f4       	brcc	.+24     	; 0x3c6 <DIO_ReadPin+0x7e>
		return (Get_Bit(PIND,(PinNum-PORTD_START)));
 3ae:	40 b3       	in	r20, 0x10	; 16
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_ReadPin+0x74>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_ReadPin+0x70>
 3c0:	cb 01       	movw	r24, r22
 3c2:	84 23       	and	r24, r20
 3c4:	08 95       	ret
	}
	return FALSE;
 3c6:	80 e0       	ldi	r24, 0x00	; 0
}
 3c8:	08 95       	ret

000003ca <DIO_SetPinDirection>:
* function arguments :- pin number and desired direction (I/O)                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	/* according to pin number calculate the corresponding port to set its direction */
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
 3ca:	88 30       	cpi	r24, 0x08	; 8
 3cc:	00 f5       	brcc	.+64     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		switch(PinDirection){
 3ce:	66 23       	and	r22, r22
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <DIO_SetPinDirection+0x28>
 3d2:	61 30       	cpi	r22, 0x01	; 1
 3d4:	09 f0       	breq	.+2      	; 0x3d8 <DIO_SetPinDirection+0xe>
 3d6:	88 c0       	rjmp	.+272    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			case HIGH : Set_Bit(DDRA,PinNum);
 3d8:	4a b3       	in	r20, 0x1a	; 26
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	b9 01       	movw	r22, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_SetPinDirection+0x1c>
 3e2:	66 0f       	add	r22, r22
 3e4:	77 1f       	adc	r23, r23
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_SetPinDirection+0x18>
 3ea:	cb 01       	movw	r24, r22
 3ec:	84 2b       	or	r24, r20
 3ee:	8a bb       	out	0x1a, r24	; 26
			break;
 3f0:	08 95       	ret
			case LOW : Clear_Bit(DDRA,PinNum);
 3f2:	4a b3       	in	r20, 0x1a	; 26
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_SetPinDirection+0x32>
 404:	cb 01       	movw	r24, r22
 406:	80 95       	com	r24
 408:	84 23       	and	r24, r20
 40a:	8a bb       	out	0x1a, r24	; 26
			break;
 40c:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 40e:	98 ef       	ldi	r25, 0xF8	; 248
 410:	98 0f       	add	r25, r24
 412:	98 30       	cpi	r25, 0x08	; 8
 414:	08 f5       	brcc	.+66     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		switch(PinDirection){
 416:	66 23       	and	r22, r22
 418:	81 f0       	breq	.+32     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41a:	61 30       	cpi	r22, 0x01	; 1
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	64 c0       	rjmp	.+200    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			case HIGH : Set_Bit(DDRB,(PinNum-PORTB_START));
 420:	47 b3       	in	r20, 0x17	; 23
 422:	21 e0       	ldi	r18, 0x01	; 1
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	b9 01       	movw	r22, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	9a 95       	dec	r25
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	cb 01       	movw	r24, r22
 434:	84 2b       	or	r24, r20
 436:	87 bb       	out	0x17, r24	; 23
			break;
 438:	08 95       	ret
			case LOW : Clear_Bit(DDRB,(PinNum-PORTB_START));
 43a:	47 b3       	in	r20, 0x17	; 23
 43c:	88 50       	subi	r24, 0x08	; 8
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	b9 01       	movw	r22, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	8a 95       	dec	r24
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	cb 01       	movw	r24, r22
 450:	80 95       	com	r24
 452:	84 23       	and	r24, r20
 454:	87 bb       	out	0x17, r24	; 23
			break;
 456:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
 458:	90 ef       	ldi	r25, 0xF0	; 240
 45a:	98 0f       	add	r25, r24
 45c:	98 30       	cpi	r25, 0x08	; 8
 45e:	08 f5       	brcc	.+66     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		switch(PinDirection){
 460:	66 23       	and	r22, r22
 462:	81 f0       	breq	.+32     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 464:	61 30       	cpi	r22, 0x01	; 1
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	3f c0       	rjmp	.+126    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			case HIGH : Set_Bit(DDRC,(PinNum-PORTC_START));
 46a:	44 b3       	in	r20, 0x14	; 20
 46c:	21 e0       	ldi	r18, 0x01	; 1
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	b9 01       	movw	r22, r18
 472:	02 c0       	rjmp	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	9a 95       	dec	r25
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 47c:	cb 01       	movw	r24, r22
 47e:	84 2b       	or	r24, r20
 480:	84 bb       	out	0x14, r24	; 20
			break;
 482:	08 95       	ret
			case LOW : Clear_Bit(DDRC,(PinNum-PORTC_START));
 484:	44 b3       	in	r20, 0x14	; 20
 486:	80 51       	subi	r24, 0x10	; 16
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	84 bb       	out	0x14, r24	; 20
			break;
 4a0:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 4a2:	98 ee       	ldi	r25, 0xE8	; 232
 4a4:	98 0f       	add	r25, r24
 4a6:	98 30       	cpi	r25, 0x08	; 8
 4a8:	f8 f4       	brcc	.+62     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		switch(PinDirection){
 4aa:	66 23       	and	r22, r22
 4ac:	79 f0       	breq	.+30     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4ae:	61 30       	cpi	r22, 0x01	; 1
 4b0:	d9 f4       	brne	.+54     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
			case HIGH : Set_Bit(DDRD,(PinNum-PORTD_START));
 4b2:	41 b3       	in	r20, 0x11	; 17
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	b9 01       	movw	r22, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	9a 95       	dec	r25
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c4:	cb 01       	movw	r24, r22
 4c6:	84 2b       	or	r24, r20
 4c8:	81 bb       	out	0x11, r24	; 17
			break;
 4ca:	08 95       	ret
			case LOW : Clear_Bit(DDRD,(PinNum-PORTD_START));
 4cc:	41 b3       	in	r20, 0x11	; 17
 4ce:	88 51       	subi	r24, 0x18	; 24
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	b9 01       	movw	r22, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4e0:	cb 01       	movw	r24, r22
 4e2:	80 95       	com	r24
 4e4:	84 23       	and	r24, r20
 4e6:	81 bb       	out	0x11, r24	; 17
 4e8:	08 95       	ret

000004ea <LCD_sendCommand>:
/* Function job :-sending a specific command to lcd                                                        */
/* Function inputs :-selected command                                                                      */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/
void LCD_sendCommand(uint8 command)
{
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
   3- wait for 1 mel second 
   4- e = 1 make enable pin high
   5- sending command in its desired mode
    */
   
	DIO_WritePin(RS,LOW);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(RW,LOW);
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 4fe:	8f e9       	ldi	r24, 0x9F	; 159
 500:	9f e0       	ldi	r25, 0x0F	; 15
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCD_sendCommand+0x18>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_sendCommand+0x1e>
 508:	00 00       	nop
	_delay_ms(ONE);
	DIO_WritePin(E,HIGH);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	83 e0       	ldi	r24, 0x03	; 3
 50e:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 512:	8f e9       	ldi	r24, 0x9F	; 159
 514:	9f e0       	ldi	r25, 0x0F	; 15
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_sendCommand+0x2c>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_sendCommand+0x32>
 51c:	00 00       	nop
	
	#ifdef FOUR_BIT_MODE
	/* send data on the desired pins upper or lower */
	#ifdef UPPER_PINS
	/* taking last 4 bits first then the other  */
	DIO_WritePin(PIN_4 ,(Get_Bit(command,PIN_4)>>PIN_4));
 51e:	c4 fb       	bst	r28, 4
 520:	66 27       	eor	r22, r22
 522:	60 f9       	bld	r22, 0
 524:	84 e0       	ldi	r24, 0x04	; 4
 526:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_5,(Get_Bit(command,PIN_5)>>PIN_5));
 52a:	c5 fb       	bst	r28, 5
 52c:	66 27       	eor	r22, r22
 52e:	60 f9       	bld	r22, 0
 530:	85 e0       	ldi	r24, 0x05	; 5
 532:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_6,(Get_Bit(command,PIN_6)>>PIN_6));
 536:	c6 fb       	bst	r28, 6
 538:	66 27       	eor	r22, r22
 53a:	60 f9       	bld	r22, 0
 53c:	86 e0       	ldi	r24, 0x06	; 6
 53e:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_7,(Get_Bit(command,PIN_7)>>PIN_7));
 542:	6c 2f       	mov	r22, r28
 544:	66 1f       	adc	r22, r22
 546:	66 27       	eor	r22, r22
 548:	66 1f       	adc	r22, r22
 54a:	87 e0       	ldi	r24, 0x07	; 7
 54c:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 550:	8f e9       	ldi	r24, 0x9F	; 159
 552:	9f e0       	ldi	r25, 0x0F	; 15
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <LCD_sendCommand+0x6a>
 558:	00 c0       	rjmp	.+0      	; 0x55a <LCD_sendCommand+0x70>
 55a:	00 00       	nop
	/* complete the sequence 
	6- wait for 1 mel second
	7- e = 0 set enable pin to low 
	*/
    _delay_ms(ONE);
    DIO_WritePin(E,LOW);
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	83 e0       	ldi	r24, 0x03	; 3
 560:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 564:	8f e9       	ldi	r24, 0x9F	; 159
 566:	9f e0       	ldi	r25, 0x0F	; 15
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_sendCommand+0x7e>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_sendCommand+0x84>
 56e:	00 00       	nop
	_delay_ms(ONE);
	/* repeat the sequence again for the first 4 bit command */

       DIO_WritePin(E,HIGH);
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 578:	8f e9       	ldi	r24, 0x9F	; 159
 57a:	9f e0       	ldi	r25, 0x0F	; 15
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCD_sendCommand+0x92>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCD_sendCommand+0x98>
 582:	00 00       	nop
       _delay_ms(ONE);
	   /* sending the rest of the command */
	#ifdef UPPER_PINS
	DIO_WritePin(PIN_4 ,(Get_Bit(command,PIN_0)>>PIN_0));
 584:	6c 2f       	mov	r22, r28
 586:	61 70       	andi	r22, 0x01	; 1
 588:	84 e0       	ldi	r24, 0x04	; 4
 58a:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_5,(Get_Bit(command,PIN_1)>>PIN_1));
 58e:	c1 fb       	bst	r28, 1
 590:	66 27       	eor	r22, r22
 592:	60 f9       	bld	r22, 0
 594:	85 e0       	ldi	r24, 0x05	; 5
 596:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_6,(Get_Bit(command,PIN_2)>>PIN_2));
 59a:	c2 fb       	bst	r28, 2
 59c:	66 27       	eor	r22, r22
 59e:	60 f9       	bld	r22, 0
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_7,(Get_Bit(command,PIN_3)>>PIN_3));
 5a6:	c3 fb       	bst	r28, 3
 5a8:	66 27       	eor	r22, r22
 5aa:	60 f9       	bld	r22, 0
 5ac:	87 e0       	ldi	r24, 0x07	; 7
 5ae:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 5b2:	8f e9       	ldi	r24, 0x9F	; 159
 5b4:	9f e0       	ldi	r25, 0x0F	; 15
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_sendCommand+0xcc>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_sendCommand+0xd2>
 5bc:	00 00       	nop
	DIO_WritePin(PIN_1,(Get_Bit(command,PIN_1)>>PIN_1));
	DIO_WritePin(PIN_2,(Get_Bit(command,PIN_2)>>PIN_2));
	DIO_WritePin(PIN_3,(Get_Bit(command,PIN_3)>>PIN_3));
	#endif
    _delay_ms(ONE);
	DIO_WritePin(E,LOW);
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 5c6:	8f e9       	ldi	r24, 0x9F	; 159
 5c8:	9f e0       	ldi	r25, 0x0F	; 15
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_sendCommand+0xe0>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <LCD_sendCommand+0xe6>
 5d0:	00 00       	nop
	_delay_ms(ONE);
	DIO_WritePin(E,LOW);
	_delay_ms(ONE);
	#endif
	
}
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <LCD_init>:


void LCD_init(void)
{
	/* setting the lcd pins direction to be outputs */
	DIO_SetPinDirection(RS,HIGH);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(RW,HIGH);
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(E,HIGH);
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	/* choosing lcd operating mode to be 4 or 8 bit mode */
	/* if the selected mode is 4 bit mode select which 4 pins in the data direction */
	 #ifdef FOUR_BIT_MODE 
	#ifdef UPPER_PINS
	/* set direction of upper pins */
	DIO_SetPinDirection(PIN_4,HIGH);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	84 e0       	ldi	r24, 0x04	; 4
 5f2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN_5,HIGH);
 5f6:	61 e0       	ldi	r22, 0x01	; 1
 5f8:	85 e0       	ldi	r24, 0x05	; 5
 5fa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN_6,HIGH);
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN_7,HIGH);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	87 e0       	ldi	r24, 0x07	; 7
 60a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <DIO_SetPinDirection>
	DIO_SetPinDirection(PIN_1,HIGH);
	DIO_SetPinDirection(PIN_2,HIGH);
	DIO_SetPinDirection(PIN_3,HIGH);
	#endif
	/* send 4 bit mode command */
	LCD_sendCommand(FOUR_BIT);
 60e:	88 e2       	ldi	r24, 0x28	; 40
 610:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
	LCD_sendCommand(EGHIT_BIT_MODE);
	
	#endif 
	       
		/* set cursor to be off then clear screen */
            LCD_sendCommand(CURSOR_OFF);
 614:	8c e0       	ldi	r24, 0x0C	; 12
 616:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
        	LCD_sendCommand(CLEAR_SCREEN);
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
 620:	08 95       	ret

00000622 <LCD_displayChar>:
/* Function job :-sending a specific command to lcd                                                        */
/* Function inputs :-selected command                                                                      */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/
void LCD_displayChar(uint8 data)
{
 622:	cf 93       	push	r28
 624:	c8 2f       	mov	r28, r24
   3- wait for 1 mel second 
   4- e = 1 make enable pin high
   5- sending data in its desired mode
    */
	
	DIO_WritePin(RS,HIGH);
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(RW,LOW);
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	82 e0       	ldi	r24, 0x02	; 2
 632:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 636:	8f e9       	ldi	r24, 0x9F	; 159
 638:	9f e0       	ldi	r25, 0x0F	; 15
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_displayChar+0x18>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_displayChar+0x1e>
 640:	00 00       	nop
	_delay_ms(ONE);
	
	DIO_WritePin(E,HIGH);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	83 e0       	ldi	r24, 0x03	; 3
 646:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 64a:	8f e9       	ldi	r24, 0x9F	; 159
 64c:	9f e0       	ldi	r25, 0x0F	; 15
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <LCD_displayChar+0x2c>
 652:	00 c0       	rjmp	.+0      	; 0x654 <LCD_displayChar+0x32>
 654:	00 00       	nop
	/* sending command to lcd choosing between 4 or 8 bit mode  */
	
	#ifdef FOUR_BIT_MODE
	#ifdef UPPER_PINS
	/* taking last 4 bits first then the other  */
    DIO_WritePin(PIN_4 ,(Get_Bit(data,PIN_4)>>PIN_4));
 656:	c4 fb       	bst	r28, 4
 658:	66 27       	eor	r22, r22
 65a:	60 f9       	bld	r22, 0
 65c:	84 e0       	ldi	r24, 0x04	; 4
 65e:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
    DIO_WritePin(PIN_5,(Get_Bit(data,PIN_5)>>PIN_5));
 662:	c5 fb       	bst	r28, 5
 664:	66 27       	eor	r22, r22
 666:	60 f9       	bld	r22, 0
 668:	85 e0       	ldi	r24, 0x05	; 5
 66a:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
    DIO_WritePin(PIN_6,(Get_Bit(data,PIN_6)>>PIN_6));
 66e:	c6 fb       	bst	r28, 6
 670:	66 27       	eor	r22, r22
 672:	60 f9       	bld	r22, 0
 674:	86 e0       	ldi	r24, 0x06	; 6
 676:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
    DIO_WritePin(PIN_7,(Get_Bit(data,PIN_7)>>PIN_7));
 67a:	6c 2f       	mov	r22, r28
 67c:	66 1f       	adc	r22, r22
 67e:	66 27       	eor	r22, r22
 680:	66 1f       	adc	r22, r22
 682:	87 e0       	ldi	r24, 0x07	; 7
 684:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 688:	8f e9       	ldi	r24, 0x9F	; 159
 68a:	9f e0       	ldi	r25, 0x0F	; 15
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_displayChar+0x6a>
 690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_displayChar+0x70>
 692:	00 00       	nop
	6- wait for 1 mel second
	7- e = 0 set enable pin to low 
	*/
	  _delay_ms(ONE);

    DIO_WritePin(E,LOW);
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	83 e0       	ldi	r24, 0x03	; 3
 698:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 69c:	8f e9       	ldi	r24, 0x9F	; 159
 69e:	9f e0       	ldi	r25, 0x0F	; 15
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_displayChar+0x7e>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_displayChar+0x84>
 6a6:	00 00       	nop
	_delay_ms(ONE);
	/* repeat the sequence again for the first 4 bit data to send the other 4 bit of data */
	DIO_WritePin(E,HIGH);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	83 e0       	ldi	r24, 0x03	; 3
 6ac:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 6b0:	8f e9       	ldi	r24, 0x9F	; 159
 6b2:	9f e0       	ldi	r25, 0x0F	; 15
 6b4:	01 97       	sbiw	r24, 0x01	; 1
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <LCD_displayChar+0x92>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <LCD_displayChar+0x98>
 6ba:	00 00       	nop
	_delay_ms(ONE);
	

	#ifdef UPPER_PINS
	DIO_WritePin(PIN_4,(Get_Bit(data,PIN_0)>>PIN_0));
 6bc:	6c 2f       	mov	r22, r28
 6be:	61 70       	andi	r22, 0x01	; 1
 6c0:	84 e0       	ldi	r24, 0x04	; 4
 6c2:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_5,(Get_Bit(data,PIN_1)>>PIN_1));
 6c6:	c1 fb       	bst	r28, 1
 6c8:	66 27       	eor	r22, r22
 6ca:	60 f9       	bld	r22, 0
 6cc:	85 e0       	ldi	r24, 0x05	; 5
 6ce:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_6,(Get_Bit(data,PIN_2)>>PIN_2));
 6d2:	c2 fb       	bst	r28, 2
 6d4:	66 27       	eor	r22, r22
 6d6:	60 f9       	bld	r22, 0
 6d8:	86 e0       	ldi	r24, 0x06	; 6
 6da:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
	DIO_WritePin(PIN_7,(Get_Bit(data,PIN_3)>>PIN_3));
 6de:	c3 fb       	bst	r28, 3
 6e0:	66 27       	eor	r22, r22
 6e2:	60 f9       	bld	r22, 0
 6e4:	87 e0       	ldi	r24, 0x07	; 7
 6e6:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 6ea:	8f e9       	ldi	r24, 0x9F	; 159
 6ec:	9f e0       	ldi	r25, 0x0F	; 15
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <LCD_displayChar+0xcc>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <LCD_displayChar+0xd2>
 6f4:	00 00       	nop
	DIO_WritePin(PIN_1,(Get_Bit(data,PIN_1)>>PIN_1));
	DIO_WritePin(PIN_2,(Get_Bit(data,PIN_2)>>PIN_2));
	DIO_WritePin(PIN_3,(Get_Bit(data,PIN_3)>>PIN_3));
	#endif
    _delay_ms(ONE);
	DIO_WritePin(E,LOW);
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	0e 94 14 01 	call	0x228	; 0x228 <DIO_WritePin>
 6fe:	8f e9       	ldi	r24, 0x9F	; 159
 700:	9f e0       	ldi	r25, 0x0F	; 15
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <LCD_displayChar+0xe0>
 706:	00 c0       	rjmp	.+0      	; 0x708 <LCD_displayChar+0xe6>
 708:	00 00       	nop
	DIO_WritePin(E,LOW);
	_delay_ms(ONE);
	#endif
	
	
}
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <LCD_displayString>:
/* Function inputs :- pointer to desired string                                                            */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/

void LCD_displayString(const uint8 *str)
{
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	fc 01       	movw	r30, r24
	uint8 index = FALSE; /* index of every character */
	/* display character by character till null character */
	while(str[index] != '\0')
 716:	80 81       	ld	r24, Z
 718:	88 23       	and	r24, r24
 71a:	59 f0       	breq	.+22     	; 0x732 <LCD_displayString+0x24>
 71c:	8f 01       	movw	r16, r30
 71e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_displayChar(str[index]);
 720:	0e 94 11 03 	call	0x622	; 0x622 <LCD_displayChar>
		index ++;
 724:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_displayString(const uint8 *str)
{
	uint8 index = FALSE; /* index of every character */
	/* display character by character till null character */
	while(str[index] != '\0')
 726:	f8 01       	movw	r30, r16
 728:	ec 0f       	add	r30, r28
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	81 11       	cpse	r24, r1
 730:	f7 cf       	rjmp	.-18     	; 0x720 <LCD_displayString+0x12>
		LCD_displayChar(str[index]);
		index ++;
	}
	
	
}
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <LCD_clear>:
/***********************************************************************************************************/

void LCD_clear(void)
{
	/* just send clear command to lcd */
	LCD_sendCommand(CLEAR_SCREEN);
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
 740:	08 95       	ret

00000742 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col)
{
	uint8 adress ; /* to store specific adress */
	/* cases on row number */
	switch (row)
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	19 f0       	breq	.+6      	; 0x74c <LCD_goToRowColumn+0xa>
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	21 f0       	breq	.+8      	; 0x752 <LCD_goToRowColumn+0x10>
 74a:	06 c0       	rjmp	.+12     	; 0x758 <LCD_goToRowColumn+0x16>
	{
		/* add col to first line command to give exact command to lcd */
		case ONE :	adress = FIRST_LINE + col ;
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	86 0f       	add	r24, r22
		break; 
 750:	04 c0       	rjmp	.+8      	; 0x75a <LCD_goToRowColumn+0x18>
		case TWO :	adress = SCOND_LINE + col ;
 752:	80 ec       	ldi	r24, 0xC0	; 192
 754:	86 0f       	add	r24, r22
		break;
 756:	01 c0       	rjmp	.+2      	; 0x75a <LCD_goToRowColumn+0x18>
		default: adress = FIRST_LINE ;
 758:	80 e8       	ldi	r24, 0x80	; 128
		
	}
	/* send adess as a command */
	LCD_sendCommand(adress);
 75a:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
 75e:	08 95       	ret

00000760 <LCD_displayStringRowColumn>:
/* Function inputs :-string ,row and column                                                                */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/

void LCD_displayStringRowColumn(const uint8 *str,uint8 row, uint8 col)
{
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	ec 01       	movw	r28, r24
 766:	86 2f       	mov	r24, r22
	/* call function of go to row column then call function of display string */
	LCD_goToRowColumn(row,col);
 768:	64 2f       	mov	r22, r20
 76a:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_goToRowColumn>
	LCD_displayString(str);
 76e:	ce 01       	movw	r24, r28
 770:	0e 94 87 03 	call	0x70e	; 0x70e <LCD_displayString>
}
 774:	df 91       	pop	r29
 776:	cf 91       	pop	r28
 778:	08 95       	ret

0000077a <LCD_intgerToString>:
/* Function inputs :- desired number                                                                       */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/

void LCD_intgerToString(uint32 num)
{
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	60 97       	sbiw	r28, 0x10	; 16
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	dc 01       	movw	r26, r24
 790:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 792:	4a e0       	ldi	r20, 0x0A	; 10
 794:	be 01       	movw	r22, r28
 796:	6f 5f       	subi	r22, 0xFF	; 255
 798:	7f 4f       	sbci	r23, 0xFF	; 255
 79a:	0e 94 a9 04 	call	0x952	; 0x952 <__itoa_ncheck>
	uint8 tem_arr[16]; /* array to store ascii result of the number */
	itoa(num,tem_arr,10); /* standard function to convert from intger to ascii */
	LCD_displayString(tem_arr);  
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 87 03 	call	0x70e	; 0x70e <LCD_displayString>
	
}
 7a6:	60 96       	adiw	r28, 0x10	; 16
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	f8 94       	cli
 7ac:	de bf       	out	0x3e, r29	; 62
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	cd bf       	out	0x3d, r28	; 61
 7b2:	df 91       	pop	r29
 7b4:	cf 91       	pop	r28
 7b6:	08 95       	ret

000007b8 <LCD_customCharacter>:
/* Function inputs :- desired character , its location in cg ram and position of reading from cg rom       */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/

void LCD_customCharacter(uint8 *character,uint8 loc,uint8 val,uint8 row,uint8 col)
{
 7b8:	df 92       	push	r13
 7ba:	ef 92       	push	r14
 7bc:	ff 92       	push	r15
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	7c 01       	movw	r14, r24
 7c8:	14 2f       	mov	r17, r20
 7ca:	d2 2e       	mov	r13, r18
	uint8 count = FALSE ; 
		/* send command to write on CG RAM */
		LCD_sendCommand((loc << 3) | 0x40);
 7cc:	86 2f       	mov	r24, r22
 7ce:	88 0f       	add	r24, r24
 7d0:	88 0f       	add	r24, r24
 7d2:	88 0f       	add	r24, r24
 7d4:	80 64       	ori	r24, 0x40	; 64
 7d6:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
 7da:	e7 01       	movw	r28, r14
 7dc:	88 e0       	ldi	r24, 0x08	; 8
 7de:	e8 0e       	add	r14, r24
 7e0:	f1 1c       	adc	r15, r1
		for(count =0;count<8;count++)
		{
			/* loop for array that describe the character */
			LCD_displayChar(character[count]);
 7e2:	89 91       	ld	r24, Y+
 7e4:	0e 94 11 03 	call	0x622	; 0x622 <LCD_displayChar>
 7e8:	8f e3       	ldi	r24, 0x3F	; 63
 7ea:	9c e9       	ldi	r25, 0x9C	; 156
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCD_customCharacter+0x34>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <LCD_customCharacter+0x3a>
 7f2:	00 00       	nop
void LCD_customCharacter(uint8 *character,uint8 loc,uint8 val,uint8 row,uint8 col)
{
	uint8 count = FALSE ; 
		/* send command to write on CG RAM */
		LCD_sendCommand((loc << 3) | 0x40);
		for(count =0;count<8;count++)
 7f4:	ce 15       	cp	r28, r14
 7f6:	df 05       	cpc	r29, r15
 7f8:	a1 f7       	brne	.-24     	; 0x7e2 <LCD_customCharacter+0x2a>
			/* loop for array that describe the character */
			LCD_displayChar(character[count]);
			_delay_ms(10);
			
		}
		LCD_sendCommand(0x80); /* send command to display on lcd */
 7fa:	80 e8       	ldi	r24, 0x80	; 128
 7fc:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_sendCommand>
		LCD_goToRowColumn(row,col);
 800:	60 2f       	mov	r22, r16
 802:	8d 2d       	mov	r24, r13
 804:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_goToRowColumn>
		LCD_displayChar(val);
 808:	81 2f       	mov	r24, r17
 80a:	0e 94 11 03 	call	0x622	; 0x622 <LCD_displayChar>
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	08 95       	ret

0000081e <main>:

extern uint8 correct,wrong;
int main(void)
{
 
  APP_init();
 81e:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	LCD_displayStringRowColumn("welcome ",2,2);
 822:	42 e0       	ldi	r20, 0x02	; 2
 824:	62 e0       	ldi	r22, 0x02	; 2
 826:	8b e7       	ldi	r24, 0x7B	; 123
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	smile_character(2,10);
 82e:	6a e0       	ldi	r22, 0x0A	; 10
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	0e 94 54 00 	call	0xa8	; 0xa8 <smile_character>
 836:	2f ef       	ldi	r18, 0xFF	; 255
 838:	87 ea       	ldi	r24, 0xA7	; 167
 83a:	91 e6       	ldi	r25, 0x61	; 97
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	80 40       	sbci	r24, 0x00	; 0
 840:	90 40       	sbci	r25, 0x00	; 0
 842:	e1 f7       	brne	.-8      	; 0x83c <main+0x1e>
 844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x28>
 846:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
 848:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
	LCD_displayStringRowColumn("let's start ",2,2);
 84c:	42 e0       	ldi	r20, 0x02	; 2
 84e:	62 e0       	ldi	r22, 0x02	; 2
 850:	84 e8       	ldi	r24, 0x84	; 132
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
 858:	2f ef       	ldi	r18, 0xFF	; 255
 85a:	87 ea       	ldi	r24, 0xA7	; 167
 85c:	91 e6       	ldi	r25, 0x61	; 97
 85e:	21 50       	subi	r18, 0x01	; 1
 860:	80 40       	sbci	r24, 0x00	; 0
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	e1 f7       	brne	.-8      	; 0x85e <main+0x40>
 866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
 868:	00 00       	nop
	_delay_ms(2000);
	LCD_clear();
 86a:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
	questions("first question","are you eqyption");
 86e:	61 e9       	ldi	r22, 0x91	; 145
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	82 ea       	ldi	r24, 0xA2	; 162
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	0e 94 a6 00 	call	0x14c	; 0x14c <questions>
	get_answer(but0);
 87a:	84 e1       	ldi	r24, 0x14	; 20
 87c:	0e 94 cc 00 	call	0x198	; 0x198 <get_answer>
	questions("second question","avelabs is 1st");
 880:	61 eb       	ldi	r22, 0xB1	; 177
 882:	70 e0       	ldi	r23, 0x00	; 0
 884:	80 ec       	ldi	r24, 0xC0	; 192
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 a6 00 	call	0x14c	; 0x14c <questions>
	get_answer(but1);
 88c:	8a e0       	ldi	r24, 0x0A	; 10
 88e:	0e 94 cc 00 	call	0x198	; 0x198 <get_answer>
	questions("third question","sw is the best");
 892:	60 ed       	ldi	r22, 0xD0	; 208
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	8f ed       	ldi	r24, 0xDF	; 223
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 a6 00 	call	0x14c	; 0x14c <questions>
	get_answer(but0);
 89e:	84 e1       	ldi	r24, 0x14	; 20
 8a0:	0e 94 cc 00 	call	0x198	; 0x198 <get_answer>
	questions("fourth question","arr are pointer");
 8a4:	6e ee       	ldi	r22, 0xEE	; 238
 8a6:	70 e0       	ldi	r23, 0x00	; 0
 8a8:	8e ef       	ldi	r24, 0xFE	; 254
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 94 a6 00 	call	0x14c	; 0x14c <questions>
	get_answer(but0);
 8b0:	84 e1       	ldi	r24, 0x14	; 20
 8b2:	0e 94 cc 00 	call	0x198	; 0x198 <get_answer>
	questions("fifth question","str like arr");
 8b6:	6e e0       	ldi	r22, 0x0E	; 14
 8b8:	71 e0       	ldi	r23, 0x01	; 1
 8ba:	8b e1       	ldi	r24, 0x1B	; 27
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 a6 00 	call	0x14c	; 0x14c <questions>
	get_answer(but0);
 8c2:	84 e1       	ldi	r24, 0x14	; 20
 8c4:	0e 94 cc 00 	call	0x198	; 0x198 <get_answer>
	LCD_clear();
 8c8:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
	LCD_displayStringRowColumn("correct:",1,0);
 8cc:	40 e0       	ldi	r20, 0x00	; 0
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	8a e2       	ldi	r24, 0x2A	; 42
 8d2:	91 e0       	ldi	r25, 0x01	; 1
 8d4:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	LCD_intgerToString(correct);
 8d8:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <correct>
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_intgerToString>
	LCD_displayStringRowColumn("wrong:",2,0);
 8e6:	40 e0       	ldi	r20, 0x00	; 0
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	83 e3       	ldi	r24, 0x33	; 51
 8ec:	91 e0       	ldi	r25, 0x01	; 1
 8ee:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
	LCD_intgerToString(wrong);
 8f2:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <__data_end>
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_intgerToString>
 900:	2f ef       	ldi	r18, 0xFF	; 255
 902:	87 ea       	ldi	r24, 0xA7	; 167
 904:	91 e6       	ldi	r25, 0x61	; 97
 906:	21 50       	subi	r18, 0x01	; 1
 908:	80 40       	sbci	r24, 0x00	; 0
 90a:	90 40       	sbci	r25, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
 910:	00 00       	nop
	_delay_ms(2000);
	if(correct > wrong)
 912:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <correct>
 916:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
 91a:	89 17       	cp	r24, r25
 91c:	68 f4       	brcc	.+26     	; 0x938 <__stack+0xd9>
	{
		LCD_clear();
 91e:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
		LCD_displayStringRowColumn("congratulation",1,1);
 922:	41 e0       	ldi	r20, 0x01	; 1
 924:	61 e0       	ldi	r22, 0x01	; 1
 926:	8a e3       	ldi	r24, 0x3A	; 58
 928:	91 e0       	ldi	r25, 0x01	; 1
 92a:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
		smile_character(2,6);
 92e:	66 e0       	ldi	r22, 0x06	; 6
 930:	82 e0       	ldi	r24, 0x02	; 2
 932:	0e 94 54 00 	call	0xa8	; 0xa8 <smile_character>
 936:	0c c0       	rjmp	.+24     	; 0x950 <__stack+0xf1>
	}
	else
	{
		LCD_clear();
 938:	0e 94 9d 03 	call	0x73a	; 0x73a <LCD_clear>
		LCD_displayStringRowColumn("hard luck",1,2);
 93c:	42 e0       	ldi	r20, 0x02	; 2
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	89 e4       	ldi	r24, 0x49	; 73
 942:	91 e0       	ldi	r25, 0x01	; 1
 944:	0e 94 b0 03 	call	0x760	; 0x760 <LCD_displayStringRowColumn>
		sad_character(2,6);
 948:	66 e0       	ldi	r22, 0x06	; 6
 94a:	82 e0       	ldi	r24, 0x02	; 2
 94c:	0e 94 7d 00 	call	0xfa	; 0xfa <sad_character>
 950:	ff cf       	rjmp	.-2      	; 0x950 <__stack+0xf1>

00000952 <__itoa_ncheck>:
 952:	bb 27       	eor	r27, r27
 954:	4a 30       	cpi	r20, 0x0A	; 10
 956:	31 f4       	brne	.+12     	; 0x964 <__itoa_ncheck+0x12>
 958:	99 23       	and	r25, r25
 95a:	22 f4       	brpl	.+8      	; 0x964 <__itoa_ncheck+0x12>
 95c:	bd e2       	ldi	r27, 0x2D	; 45
 95e:	90 95       	com	r25
 960:	81 95       	neg	r24
 962:	9f 4f       	sbci	r25, 0xFF	; 255
 964:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__utoa_common>

00000968 <__utoa_ncheck>:
 968:	bb 27       	eor	r27, r27

0000096a <__utoa_common>:
 96a:	fb 01       	movw	r30, r22
 96c:	55 27       	eor	r21, r21
 96e:	aa 27       	eor	r26, r26
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	aa 1f       	adc	r26, r26
 976:	a4 17       	cp	r26, r20
 978:	10 f0       	brcs	.+4      	; 0x97e <__utoa_common+0x14>
 97a:	a4 1b       	sub	r26, r20
 97c:	83 95       	inc	r24
 97e:	50 51       	subi	r21, 0x10	; 16
 980:	b9 f7       	brne	.-18     	; 0x970 <__utoa_common+0x6>
 982:	a0 5d       	subi	r26, 0xD0	; 208
 984:	aa 33       	cpi	r26, 0x3A	; 58
 986:	08 f0       	brcs	.+2      	; 0x98a <__utoa_common+0x20>
 988:	a9 5d       	subi	r26, 0xD9	; 217
 98a:	a1 93       	st	Z+, r26
 98c:	00 97       	sbiw	r24, 0x00	; 0
 98e:	79 f7       	brne	.-34     	; 0x96e <__utoa_common+0x4>
 990:	b1 11       	cpse	r27, r1
 992:	b1 93       	st	Z+, r27
 994:	11 92       	st	Z+, r1
 996:	cb 01       	movw	r24, r22
 998:	0c 94 ce 04 	jmp	0x99c	; 0x99c <strrev>

0000099c <strrev>:
 99c:	dc 01       	movw	r26, r24
 99e:	fc 01       	movw	r30, r24
 9a0:	67 2f       	mov	r22, r23
 9a2:	71 91       	ld	r23, Z+
 9a4:	77 23       	and	r23, r23
 9a6:	e1 f7       	brne	.-8      	; 0x9a0 <strrev+0x4>
 9a8:	32 97       	sbiw	r30, 0x02	; 2
 9aa:	04 c0       	rjmp	.+8      	; 0x9b4 <strrev+0x18>
 9ac:	7c 91       	ld	r23, X
 9ae:	6d 93       	st	X+, r22
 9b0:	70 83       	st	Z, r23
 9b2:	62 91       	ld	r22, -Z
 9b4:	ae 17       	cp	r26, r30
 9b6:	bf 07       	cpc	r27, r31
 9b8:	c8 f3       	brcs	.-14     	; 0x9ac <strrev+0x10>
 9ba:	08 95       	ret

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>
