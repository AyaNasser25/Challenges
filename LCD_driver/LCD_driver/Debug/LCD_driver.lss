
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000560  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000560  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000060c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000107d  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075d  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ae  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a8e  00000000  00000000  00002bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000366d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  7a:	0c 94 ae 02 	jmp	0x55c	; 0x55c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WritePin>:
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
		return (Get_Bit(PIND,(PinNum-PORTD_START)));
	}
	return FALSE;
}
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	00 f5       	brcc	.+64     	; 0xc6 <DIO_WritePin+0x44>
  86:	66 23       	and	r22, r22
  88:	81 f0       	breq	.+32     	; 0xaa <DIO_WritePin+0x28>
  8a:	61 30       	cpi	r22, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_WritePin+0xe>
  8e:	88 c0       	rjmp	.+272    	; 0x1a0 <DIO_WritePin+0x11e>
  90:	4b b3       	in	r20, 0x1b	; 27
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	b9 01       	movw	r22, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <DIO_WritePin+0x1c>
  9a:	66 0f       	add	r22, r22
  9c:	77 1f       	adc	r23, r23
  9e:	8a 95       	dec	r24
  a0:	e2 f7       	brpl	.-8      	; 0x9a <DIO_WritePin+0x18>
  a2:	cb 01       	movw	r24, r22
  a4:	84 2b       	or	r24, r20
  a6:	8b bb       	out	0x1b, r24	; 27
  a8:	08 95       	ret
  aa:	4b b3       	in	r20, 0x1b	; 27
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	b9 01       	movw	r22, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_WritePin+0x36>
  b4:	66 0f       	add	r22, r22
  b6:	77 1f       	adc	r23, r23
  b8:	8a 95       	dec	r24
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_WritePin+0x32>
  bc:	cb 01       	movw	r24, r22
  be:	80 95       	com	r24
  c0:	84 23       	and	r24, r20
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret
  c6:	98 ef       	ldi	r25, 0xF8	; 248
  c8:	98 0f       	add	r25, r24
  ca:	98 30       	cpi	r25, 0x08	; 8
  cc:	08 f5       	brcc	.+66     	; 0x110 <DIO_WritePin+0x8e>
  ce:	66 23       	and	r22, r22
  d0:	81 f0       	breq	.+32     	; 0xf2 <DIO_WritePin+0x70>
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	09 f0       	breq	.+2      	; 0xd8 <DIO_WritePin+0x56>
  d6:	64 c0       	rjmp	.+200    	; 0x1a0 <DIO_WritePin+0x11e>
  d8:	48 b3       	in	r20, 0x18	; 24
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_WritePin+0x64>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	9a 95       	dec	r25
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_WritePin+0x60>
  ea:	cb 01       	movw	r24, r22
  ec:	84 2b       	or	r24, r20
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	08 95       	ret
  f2:	48 b3       	in	r20, 0x18	; 24
  f4:	88 50       	subi	r24, 0x08	; 8
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	b9 01       	movw	r22, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_WritePin+0x80>
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	8a 95       	dec	r24
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_WritePin+0x7c>
 106:	cb 01       	movw	r24, r22
 108:	80 95       	com	r24
 10a:	84 23       	and	r24, r20
 10c:	88 bb       	out	0x18, r24	; 24
 10e:	08 95       	ret
 110:	90 ef       	ldi	r25, 0xF0	; 240
 112:	98 0f       	add	r25, r24
 114:	98 30       	cpi	r25, 0x08	; 8
 116:	08 f5       	brcc	.+66     	; 0x15a <DIO_WritePin+0xd8>
 118:	66 23       	and	r22, r22
 11a:	81 f0       	breq	.+32     	; 0x13c <DIO_WritePin+0xba>
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	09 f0       	breq	.+2      	; 0x122 <DIO_WritePin+0xa0>
 120:	3f c0       	rjmp	.+126    	; 0x1a0 <DIO_WritePin+0x11e>
 122:	45 b3       	in	r20, 0x15	; 21
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_WritePin+0xae>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	9a 95       	dec	r25
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_WritePin+0xaa>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	80 51       	subi	r24, 0x10	; 16
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_WritePin+0xca>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_WritePin+0xc6>
 150:	cb 01       	movw	r24, r22
 152:	80 95       	com	r24
 154:	84 23       	and	r24, r20
 156:	85 bb       	out	0x15, r24	; 21
 158:	08 95       	ret
 15a:	98 ee       	ldi	r25, 0xE8	; 232
 15c:	98 0f       	add	r25, r24
 15e:	98 30       	cpi	r25, 0x08	; 8
 160:	f8 f4       	brcc	.+62     	; 0x1a0 <DIO_WritePin+0x11e>
 162:	66 23       	and	r22, r22
 164:	79 f0       	breq	.+30     	; 0x184 <DIO_WritePin+0x102>
 166:	61 30       	cpi	r22, 0x01	; 1
 168:	d9 f4       	brne	.+54     	; 0x1a0 <DIO_WritePin+0x11e>
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WritePin+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WritePin+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	84 2b       	or	r24, r20
 180:	82 bb       	out	0x12, r24	; 18
 182:	08 95       	ret
 184:	42 b3       	in	r20, 0x12	; 18
 186:	88 51       	subi	r24, 0x18	; 24
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_WritePin+0x112>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_WritePin+0x10e>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	08 95       	ret

000001a2 <DIO_SetPinDirection>:
* function arguments :- pin number and desired direction (I/O)                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	/* according to pin number calculate the corresponding port to set its direction */
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	00 f5       	brcc	.+64     	; 0x1e6 <DIO_SetPinDirection+0x44>
		switch(PinDirection){
 1a6:	66 23       	and	r22, r22
 1a8:	81 f0       	breq	.+32     	; 0x1ca <DIO_SetPinDirection+0x28>
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	09 f0       	breq	.+2      	; 0x1b0 <DIO_SetPinDirection+0xe>
 1ae:	88 c0       	rjmp	.+272    	; 0x2c0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRA,PinNum);
 1b0:	4a b3       	in	r20, 0x1a	; 26
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_SetPinDirection+0x1c>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_SetPinDirection+0x18>
 1c2:	cb 01       	movw	r24, r22
 1c4:	84 2b       	or	r24, r20
 1c6:	8a bb       	out	0x1a, r24	; 26
			break;
 1c8:	08 95       	ret
			case LOW : Clear_Bit(DDRA,PinNum);
 1ca:	4a b3       	in	r20, 0x1a	; 26
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_SetPinDirection+0x36>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_SetPinDirection+0x32>
 1dc:	cb 01       	movw	r24, r22
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8a bb       	out	0x1a, r24	; 26
			break;
 1e4:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 1e6:	98 ef       	ldi	r25, 0xF8	; 248
 1e8:	98 0f       	add	r25, r24
 1ea:	98 30       	cpi	r25, 0x08	; 8
 1ec:	08 f5       	brcc	.+66     	; 0x230 <DIO_SetPinDirection+0x8e>
		switch(PinDirection){
 1ee:	66 23       	and	r22, r22
 1f0:	81 f0       	breq	.+32     	; 0x212 <DIO_SetPinDirection+0x70>
 1f2:	61 30       	cpi	r22, 0x01	; 1
 1f4:	09 f0       	breq	.+2      	; 0x1f8 <DIO_SetPinDirection+0x56>
 1f6:	64 c0       	rjmp	.+200    	; 0x2c0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRB,(PinNum-PORTB_START));
 1f8:	47 b3       	in	r20, 0x17	; 23
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	b9 01       	movw	r22, r18
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_SetPinDirection+0x64>
 202:	66 0f       	add	r22, r22
 204:	77 1f       	adc	r23, r23
 206:	9a 95       	dec	r25
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_SetPinDirection+0x60>
 20a:	cb 01       	movw	r24, r22
 20c:	84 2b       	or	r24, r20
 20e:	87 bb       	out	0x17, r24	; 23
			break;
 210:	08 95       	ret
			case LOW : Clear_Bit(DDRB,(PinNum-PORTB_START));
 212:	47 b3       	in	r20, 0x17	; 23
 214:	88 50       	subi	r24, 0x08	; 8
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x80>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x7c>
 226:	cb 01       	movw	r24, r22
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	87 bb       	out	0x17, r24	; 23
			break;
 22e:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
 230:	90 ef       	ldi	r25, 0xF0	; 240
 232:	98 0f       	add	r25, r24
 234:	98 30       	cpi	r25, 0x08	; 8
 236:	08 f5       	brcc	.+66     	; 0x27a <DIO_SetPinDirection+0xd8>
		switch(PinDirection){
 238:	66 23       	and	r22, r22
 23a:	81 f0       	breq	.+32     	; 0x25c <DIO_SetPinDirection+0xba>
 23c:	61 30       	cpi	r22, 0x01	; 1
 23e:	09 f0       	breq	.+2      	; 0x242 <DIO_SetPinDirection+0xa0>
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRC,(PinNum-PORTC_START));
 242:	44 b3       	in	r20, 0x14	; 20
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_SetPinDirection+0xae>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	9a 95       	dec	r25
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_SetPinDirection+0xaa>
 254:	cb 01       	movw	r24, r22
 256:	84 2b       	or	r24, r20
 258:	84 bb       	out	0x14, r24	; 20
			break;
 25a:	08 95       	ret
			case LOW : Clear_Bit(DDRC,(PinNum-PORTC_START));
 25c:	44 b3       	in	r20, 0x14	; 20
 25e:	80 51       	subi	r24, 0x10	; 16
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	b9 01       	movw	r22, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_SetPinDirection+0xca>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_SetPinDirection+0xc6>
 270:	cb 01       	movw	r24, r22
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	84 bb       	out	0x14, r24	; 20
			break;
 278:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 27a:	98 ee       	ldi	r25, 0xE8	; 232
 27c:	98 0f       	add	r25, r24
 27e:	98 30       	cpi	r25, 0x08	; 8
 280:	f8 f4       	brcc	.+62     	; 0x2c0 <DIO_SetPinDirection+0x11e>
		switch(PinDirection){
 282:	66 23       	and	r22, r22
 284:	79 f0       	breq	.+30     	; 0x2a4 <DIO_SetPinDirection+0x102>
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	d9 f4       	brne	.+54     	; 0x2c0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRD,(PinNum-PORTD_START));
 28a:	41 b3       	in	r20, 0x11	; 17
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinDirection+0xf6>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	9a 95       	dec	r25
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinDirection+0xf2>
 29c:	cb 01       	movw	r24, r22
 29e:	84 2b       	or	r24, r20
 2a0:	81 bb       	out	0x11, r24	; 17
			break;
 2a2:	08 95       	ret
			case LOW : Clear_Bit(DDRD,(PinNum-PORTD_START));
 2a4:	41 b3       	in	r20, 0x11	; 17
 2a6:	88 51       	subi	r24, 0x18	; 24
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinDirection+0x112>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinDirection+0x10e>
 2b8:	cb 01       	movw	r24, r22
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	81 bb       	out	0x11, r24	; 17
 2c0:	08 95       	ret

000002c2 <LCD_sendCommand>:
/***********************************************************************************************************/

void LCD_clear(void)
{
	/* just send clear command to lcd */
	LCD_sendCommand(CLEAR_SCREEN);
 2c2:	cf 93       	push	r28
 2c4:	c8 2f       	mov	r28, r24
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 2d6:	8f e9       	ldi	r24, 0x9F	; 159
 2d8:	9f e0       	ldi	r25, 0x0F	; 15
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_sendCommand+0x18>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_sendCommand+0x1e>
 2e0:	00 00       	nop
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 2ea:	8f e9       	ldi	r24, 0x9F	; 159
 2ec:	9f e0       	ldi	r25, 0x0F	; 15
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_sendCommand+0x2c>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_sendCommand+0x32>
 2f4:	00 00       	nop
 2f6:	c4 fb       	bst	r28, 4
 2f8:	66 27       	eor	r22, r22
 2fa:	60 f9       	bld	r22, 0
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 302:	c5 fb       	bst	r28, 5
 304:	66 27       	eor	r22, r22
 306:	60 f9       	bld	r22, 0
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 30e:	c6 fb       	bst	r28, 6
 310:	66 27       	eor	r22, r22
 312:	60 f9       	bld	r22, 0
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 31a:	6c 2f       	mov	r22, r28
 31c:	66 1f       	adc	r22, r22
 31e:	66 27       	eor	r22, r22
 320:	66 1f       	adc	r22, r22
 322:	87 e0       	ldi	r24, 0x07	; 7
 324:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 328:	8f e9       	ldi	r24, 0x9F	; 159
 32a:	9f e0       	ldi	r25, 0x0F	; 15
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_sendCommand+0x6a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_sendCommand+0x70>
 332:	00 00       	nop
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	83 e0       	ldi	r24, 0x03	; 3
 338:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 33c:	8f e9       	ldi	r24, 0x9F	; 159
 33e:	9f e0       	ldi	r25, 0x0F	; 15
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_sendCommand+0x7e>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_sendCommand+0x84>
 346:	00 00       	nop
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 350:	8f e9       	ldi	r24, 0x9F	; 159
 352:	9f e0       	ldi	r25, 0x0F	; 15
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <LCD_sendCommand+0x92>
 358:	00 c0       	rjmp	.+0      	; 0x35a <LCD_sendCommand+0x98>
 35a:	00 00       	nop
 35c:	6c 2f       	mov	r22, r28
 35e:	61 70       	andi	r22, 0x01	; 1
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 366:	c1 fb       	bst	r28, 1
 368:	66 27       	eor	r22, r22
 36a:	60 f9       	bld	r22, 0
 36c:	85 e0       	ldi	r24, 0x05	; 5
 36e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 372:	c2 fb       	bst	r28, 2
 374:	66 27       	eor	r22, r22
 376:	60 f9       	bld	r22, 0
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 37e:	c3 fb       	bst	r28, 3
 380:	66 27       	eor	r22, r22
 382:	60 f9       	bld	r22, 0
 384:	87 e0       	ldi	r24, 0x07	; 7
 386:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 38a:	8f e9       	ldi	r24, 0x9F	; 159
 38c:	9f e0       	ldi	r25, 0x0F	; 15
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_sendCommand+0xcc>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_sendCommand+0xd2>
 394:	00 00       	nop
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 39e:	8f e9       	ldi	r24, 0x9F	; 159
 3a0:	9f e0       	ldi	r25, 0x0F	; 15
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <LCD_sendCommand+0xe0>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_sendCommand+0xe6>
 3a8:	00 00       	nop
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <LCD_init>:
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	85 e0       	ldi	r24, 0x05	; 5
 3d2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	87 e0       	ldi	r24, 0x07	; 7
 3e2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <DIO_SetPinDirection>
 3e6:	88 e2       	ldi	r24, 0x28	; 40
 3e8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_sendCommand>
 3ec:	8c e0       	ldi	r24, 0x0C	; 12
 3ee:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_sendCommand>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_sendCommand>
 3f8:	08 95       	ret

000003fa <LCD_displayChar>:
 3fa:	cf 93       	push	r28
 3fc:	c8 2f       	mov	r28, r24
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 422:	8f e9       	ldi	r24, 0x9F	; 159
 424:	9f e0       	ldi	r25, 0x0F	; 15
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	c4 fb       	bst	r28, 4
 430:	66 27       	eor	r22, r22
 432:	60 f9       	bld	r22, 0
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 43a:	c5 fb       	bst	r28, 5
 43c:	66 27       	eor	r22, r22
 43e:	60 f9       	bld	r22, 0
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 446:	c6 fb       	bst	r28, 6
 448:	66 27       	eor	r22, r22
 44a:	60 f9       	bld	r22, 0
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 452:	6c 2f       	mov	r22, r28
 454:	66 1f       	adc	r22, r22
 456:	66 27       	eor	r22, r22
 458:	66 1f       	adc	r22, r22
 45a:	87 e0       	ldi	r24, 0x07	; 7
 45c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 460:	8f e9       	ldi	r24, 0x9F	; 159
 462:	9f e0       	ldi	r25, 0x0F	; 15
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 46a:	00 00       	nop
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 474:	8f e9       	ldi	r24, 0x9F	; 159
 476:	9f e0       	ldi	r25, 0x0F	; 15
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47e:	00 00       	nop
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 488:	8f e9       	ldi	r24, 0x9F	; 159
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	6c 2f       	mov	r22, r28
 496:	61 70       	andi	r22, 0x01	; 1
 498:	84 e0       	ldi	r24, 0x04	; 4
 49a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 49e:	c1 fb       	bst	r28, 1
 4a0:	66 27       	eor	r22, r22
 4a2:	60 f9       	bld	r22, 0
 4a4:	85 e0       	ldi	r24, 0x05	; 5
 4a6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 4aa:	c2 fb       	bst	r28, 2
 4ac:	66 27       	eor	r22, r22
 4ae:	60 f9       	bld	r22, 0
 4b0:	86 e0       	ldi	r24, 0x06	; 6
 4b2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 4b6:	c3 fb       	bst	r28, 3
 4b8:	66 27       	eor	r22, r22
 4ba:	60 f9       	bld	r22, 0
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 4c2:	8f e9       	ldi	r24, 0x9F	; 159
 4c4:	9f e0       	ldi	r25, 0x0F	; 15
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
 4d6:	8f e9       	ldi	r24, 0x9F	; 159
 4d8:	9f e0       	ldi	r25, 0x0F	; 15
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4e0:	00 00       	nop
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <LCD_displayString>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	fc 01       	movw	r30, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	88 23       	and	r24, r24
 4f2:	59 f0       	breq	.+22     	; 0x50a <LCD_displayString+0x24>
 4f4:	8f 01       	movw	r16, r30
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
 4f8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_displayChar>
 4fc:	cf 5f       	subi	r28, 0xFF	; 255
 4fe:	f8 01       	movw	r30, r16
 500:	ec 0f       	add	r30, r28
 502:	f1 1d       	adc	r31, r1
 504:	80 81       	ld	r24, Z
 506:	81 11       	cpse	r24, r1
 508:	f7 cf       	rjmp	.-18     	; 0x4f8 <LCD_displayString+0x12>
 50a:	cf 91       	pop	r28
 50c:	1f 91       	pop	r17
 50e:	0f 91       	pop	r16
 510:	08 95       	ret

00000512 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row, uint8 col)
{
	uint8 adress ; /* to store specific adress */
	/* cases on row number */
	switch (row)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	19 f0       	breq	.+6      	; 0x51c <LCD_goToRowColumn+0xa>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	21 f0       	breq	.+8      	; 0x522 <LCD_goToRowColumn+0x10>
 51a:	06 c0       	rjmp	.+12     	; 0x528 <LCD_goToRowColumn+0x16>
	{
		/* add col to first line command to give exact command to lcd */
		case ONE :	adress = FIRST_LINE + col ;
 51c:	80 e8       	ldi	r24, 0x80	; 128
 51e:	86 0f       	add	r24, r22
		break; 
 520:	04 c0       	rjmp	.+8      	; 0x52a <LCD_goToRowColumn+0x18>
		case TWO :	adress = SCOND_LINE + col ;
 522:	80 ec       	ldi	r24, 0xC0	; 192
 524:	86 0f       	add	r24, r22
		break;
 526:	01 c0       	rjmp	.+2      	; 0x52a <LCD_goToRowColumn+0x18>
		default: adress = FIRST_LINE ;
 528:	80 e8       	ldi	r24, 0x80	; 128
		
	}
	/* send adess as a command */
	LCD_sendCommand(adress);
 52a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <LCD_sendCommand>
 52e:	08 95       	ret

00000530 <LCD_displayStringRowColumn>:
/* Function inputs :-string ,row and column                                                                */
/* Function outputs :- N/A                                                                                 */
/***********************************************************************************************************/

void LCD_displayStringRowColumn(const uint8 *str,uint8 row, uint8 col)
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	ec 01       	movw	r28, r24
 536:	86 2f       	mov	r24, r22
	/* call function of go to row column then call function of display string */
	LCD_goToRowColumn(row,col);
 538:	64 2f       	mov	r22, r20
 53a:	0e 94 89 02 	call	0x512	; 0x512 <LCD_goToRowColumn>
	LCD_displayString(str);
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_displayString>
}
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <main>:
#include <util/delay.h>


int main(void)
{
    LCD_init();
 54a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_init>
	LCD_displayStringRowColumn("aya me",1,5);
 54e:	45 e0       	ldi	r20, 0x05	; 5
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	80 e6       	ldi	r24, 0x60	; 96
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 98 02 	call	0x530	; 0x530 <LCD_displayStringRowColumn>
 55a:	ff cf       	rjmp	.-2      	; 0x55a <main+0x10>

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
