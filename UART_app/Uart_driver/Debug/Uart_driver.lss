
Uart_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afe  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000646  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000641  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002a01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  64:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_WritePin>:
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
		return (Get_Bit(PIND,(PinNum-PORTD_START)));
	}
	return FALSE;
}
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	00 f5       	brcc	.+64     	; 0xb0 <DIO_WritePin+0x44>
  70:	66 23       	and	r22, r22
  72:	81 f0       	breq	.+32     	; 0x94 <DIO_WritePin+0x28>
  74:	61 30       	cpi	r22, 0x01	; 1
  76:	09 f0       	breq	.+2      	; 0x7a <DIO_WritePin+0xe>
  78:	88 c0       	rjmp	.+272    	; 0x18a <DIO_WritePin+0x11e>
  7a:	4b b3       	in	r20, 0x1b	; 27
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	b9 01       	movw	r22, r18
  82:	02 c0       	rjmp	.+4      	; 0x88 <DIO_WritePin+0x1c>
  84:	66 0f       	add	r22, r22
  86:	77 1f       	adc	r23, r23
  88:	8a 95       	dec	r24
  8a:	e2 f7       	brpl	.-8      	; 0x84 <DIO_WritePin+0x18>
  8c:	cb 01       	movw	r24, r22
  8e:	84 2b       	or	r24, r20
  90:	8b bb       	out	0x1b, r24	; 27
  92:	08 95       	ret
  94:	4b b3       	in	r20, 0x1b	; 27
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	b9 01       	movw	r22, r18
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_WritePin+0x36>
  9e:	66 0f       	add	r22, r22
  a0:	77 1f       	adc	r23, r23
  a2:	8a 95       	dec	r24
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_WritePin+0x32>
  a6:	cb 01       	movw	r24, r22
  a8:	80 95       	com	r24
  aa:	84 23       	and	r24, r20
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	08 95       	ret
  b0:	98 ef       	ldi	r25, 0xF8	; 248
  b2:	98 0f       	add	r25, r24
  b4:	98 30       	cpi	r25, 0x08	; 8
  b6:	08 f5       	brcc	.+66     	; 0xfa <DIO_WritePin+0x8e>
  b8:	66 23       	and	r22, r22
  ba:	81 f0       	breq	.+32     	; 0xdc <DIO_WritePin+0x70>
  bc:	61 30       	cpi	r22, 0x01	; 1
  be:	09 f0       	breq	.+2      	; 0xc2 <DIO_WritePin+0x56>
  c0:	64 c0       	rjmp	.+200    	; 0x18a <DIO_WritePin+0x11e>
  c2:	48 b3       	in	r20, 0x18	; 24
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	b9 01       	movw	r22, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_WritePin+0x64>
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	9a 95       	dec	r25
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_WritePin+0x60>
  d4:	cb 01       	movw	r24, r22
  d6:	84 2b       	or	r24, r20
  d8:	88 bb       	out	0x18, r24	; 24
  da:	08 95       	ret
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	88 50       	subi	r24, 0x08	; 8
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_WritePin+0x80>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_WritePin+0x7c>
  f0:	cb 01       	movw	r24, r22
  f2:	80 95       	com	r24
  f4:	84 23       	and	r24, r20
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret
  fa:	90 ef       	ldi	r25, 0xF0	; 240
  fc:	98 0f       	add	r25, r24
  fe:	98 30       	cpi	r25, 0x08	; 8
 100:	08 f5       	brcc	.+66     	; 0x144 <DIO_WritePin+0xd8>
 102:	66 23       	and	r22, r22
 104:	81 f0       	breq	.+32     	; 0x126 <DIO_WritePin+0xba>
 106:	61 30       	cpi	r22, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <DIO_WritePin+0xa0>
 10a:	3f c0       	rjmp	.+126    	; 0x18a <DIO_WritePin+0x11e>
 10c:	45 b3       	in	r20, 0x15	; 21
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_WritePin+0xae>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	9a 95       	dec	r25
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_WritePin+0xaa>
 11e:	cb 01       	movw	r24, r22
 120:	84 2b       	or	r24, r20
 122:	85 bb       	out	0x15, r24	; 21
 124:	08 95       	ret
 126:	45 b3       	in	r20, 0x15	; 21
 128:	80 51       	subi	r24, 0x10	; 16
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_WritePin+0xca>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_WritePin+0xc6>
 13a:	cb 01       	movw	r24, r22
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	85 bb       	out	0x15, r24	; 21
 142:	08 95       	ret
 144:	98 ee       	ldi	r25, 0xE8	; 232
 146:	98 0f       	add	r25, r24
 148:	98 30       	cpi	r25, 0x08	; 8
 14a:	f8 f4       	brcc	.+62     	; 0x18a <DIO_WritePin+0x11e>
 14c:	66 23       	and	r22, r22
 14e:	79 f0       	breq	.+30     	; 0x16e <DIO_WritePin+0x102>
 150:	61 30       	cpi	r22, 0x01	; 1
 152:	d9 f4       	brne	.+54     	; 0x18a <DIO_WritePin+0x11e>
 154:	42 b3       	in	r20, 0x12	; 18
 156:	21 e0       	ldi	r18, 0x01	; 1
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	b9 01       	movw	r22, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_WritePin+0xf6>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	9a 95       	dec	r25
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_WritePin+0xf2>
 166:	cb 01       	movw	r24, r22
 168:	84 2b       	or	r24, r20
 16a:	82 bb       	out	0x12, r24	; 18
 16c:	08 95       	ret
 16e:	42 b3       	in	r20, 0x12	; 18
 170:	88 51       	subi	r24, 0x18	; 24
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WritePin+0x112>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WritePin+0x10e>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret

0000018c <DIO_SetPinDirection>:
* function arguments :- pin number and desired direction (I/O)                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	/* according to pin number calculate the corresponding port to set its direction */
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	00 f5       	brcc	.+64     	; 0x1d0 <DIO_SetPinDirection+0x44>
		switch(PinDirection){
 190:	66 23       	and	r22, r22
 192:	81 f0       	breq	.+32     	; 0x1b4 <DIO_SetPinDirection+0x28>
 194:	61 30       	cpi	r22, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <DIO_SetPinDirection+0xe>
 198:	88 c0       	rjmp	.+272    	; 0x2aa <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRA,PinNum);
 19a:	4a b3       	in	r20, 0x1a	; 26
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	b9 01       	movw	r22, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPinDirection+0x1c>
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPinDirection+0x18>
 1ac:	cb 01       	movw	r24, r22
 1ae:	84 2b       	or	r24, r20
 1b0:	8a bb       	out	0x1a, r24	; 26
			break;
 1b2:	08 95       	ret
			case LOW : Clear_Bit(DDRA,PinNum);
 1b4:	4a b3       	in	r20, 0x1a	; 26
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDirection+0x36>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDirection+0x32>
 1c6:	cb 01       	movw	r24, r22
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	8a bb       	out	0x1a, r24	; 26
			break;
 1ce:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 1d0:	98 ef       	ldi	r25, 0xF8	; 248
 1d2:	98 0f       	add	r25, r24
 1d4:	98 30       	cpi	r25, 0x08	; 8
 1d6:	08 f5       	brcc	.+66     	; 0x21a <DIO_SetPinDirection+0x8e>
		switch(PinDirection){
 1d8:	66 23       	and	r22, r22
 1da:	81 f0       	breq	.+32     	; 0x1fc <DIO_SetPinDirection+0x70>
 1dc:	61 30       	cpi	r22, 0x01	; 1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <DIO_SetPinDirection+0x56>
 1e0:	64 c0       	rjmp	.+200    	; 0x2aa <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRB,(PinNum-PORTB_START));
 1e2:	47 b3       	in	r20, 0x17	; 23
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_SetPinDirection+0x64>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	9a 95       	dec	r25
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_SetPinDirection+0x60>
 1f4:	cb 01       	movw	r24, r22
 1f6:	84 2b       	or	r24, r20
 1f8:	87 bb       	out	0x17, r24	; 23
			break;
 1fa:	08 95       	ret
			case LOW : Clear_Bit(DDRB,(PinNum-PORTB_START));
 1fc:	47 b3       	in	r20, 0x17	; 23
 1fe:	88 50       	subi	r24, 0x08	; 8
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_SetPinDirection+0x80>
 208:	66 0f       	add	r22, r22
 20a:	77 1f       	adc	r23, r23
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_SetPinDirection+0x7c>
 210:	cb 01       	movw	r24, r22
 212:	80 95       	com	r24
 214:	84 23       	and	r24, r20
 216:	87 bb       	out	0x17, r24	; 23
			break;
 218:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
 21a:	90 ef       	ldi	r25, 0xF0	; 240
 21c:	98 0f       	add	r25, r24
 21e:	98 30       	cpi	r25, 0x08	; 8
 220:	08 f5       	brcc	.+66     	; 0x264 <DIO_SetPinDirection+0xd8>
		switch(PinDirection){
 222:	66 23       	and	r22, r22
 224:	81 f0       	breq	.+32     	; 0x246 <DIO_SetPinDirection+0xba>
 226:	61 30       	cpi	r22, 0x01	; 1
 228:	09 f0       	breq	.+2      	; 0x22c <DIO_SetPinDirection+0xa0>
 22a:	3f c0       	rjmp	.+126    	; 0x2aa <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRC,(PinNum-PORTC_START));
 22c:	44 b3       	in	r20, 0x14	; 20
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDirection+0xae>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	9a 95       	dec	r25
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDirection+0xaa>
 23e:	cb 01       	movw	r24, r22
 240:	84 2b       	or	r24, r20
 242:	84 bb       	out	0x14, r24	; 20
			break;
 244:	08 95       	ret
			case LOW : Clear_Bit(DDRC,(PinNum-PORTC_START));
 246:	44 b3       	in	r20, 0x14	; 20
 248:	80 51       	subi	r24, 0x10	; 16
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	b9 01       	movw	r22, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinDirection+0xca>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinDirection+0xc6>
 25a:	cb 01       	movw	r24, r22
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	84 bb       	out	0x14, r24	; 20
			break;
 262:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 264:	98 ee       	ldi	r25, 0xE8	; 232
 266:	98 0f       	add	r25, r24
 268:	98 30       	cpi	r25, 0x08	; 8
 26a:	f8 f4       	brcc	.+62     	; 0x2aa <DIO_SetPinDirection+0x11e>
		switch(PinDirection){
 26c:	66 23       	and	r22, r22
 26e:	79 f0       	breq	.+30     	; 0x28e <DIO_SetPinDirection+0x102>
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	d9 f4       	brne	.+54     	; 0x2aa <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRD,(PinNum-PORTD_START));
 274:	41 b3       	in	r20, 0x11	; 17
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_SetPinDirection+0xf6>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	9a 95       	dec	r25
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_SetPinDirection+0xf2>
 286:	cb 01       	movw	r24, r22
 288:	84 2b       	or	r24, r20
 28a:	81 bb       	out	0x11, r24	; 17
			break;
 28c:	08 95       	ret
			case LOW : Clear_Bit(DDRD,(PinNum-PORTD_START));
 28e:	41 b3       	in	r20, 0x11	; 17
 290:	88 51       	subi	r24, 0x18	; 24
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinDirection+0x112>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinDirection+0x10e>
 2a2:	cb 01       	movw	r24, r22
 2a4:	80 95       	com	r24
 2a6:	84 23       	and	r24, r20
 2a8:	81 bb       	out	0x11, r24	; 17
 2aa:	08 95       	ret

000002ac <DIO_togglePin>:
* function arguments :- pin number and the value written to it                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_togglePin(uint8 PinNum){
	/* according to pin number calculate the corresponding port to toggle  */
	if(PinNum >= PORTA_START && PinNum <= PORTA_END){
 2ac:	88 30       	cpi	r24, 0x08	; 8
 2ae:	68 f4       	brcc	.+26     	; 0x2ca <DIO_togglePin+0x1e>
		Togle_Bit(PORTA,PinNum);
 2b0:	4b b3       	in	r20, 0x1b	; 27
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	b9 01       	movw	r22, r18
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_togglePin+0x12>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	8a 95       	dec	r24
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_togglePin+0xe>
 2c2:	cb 01       	movw	r24, r22
 2c4:	84 27       	eor	r24, r20
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 2ca:	98 ef       	ldi	r25, 0xF8	; 248
 2cc:	98 0f       	add	r25, r24
 2ce:	98 30       	cpi	r25, 0x08	; 8
 2d0:	68 f4       	brcc	.+26     	; 0x2ec <DIO_togglePin+0x40>
		Togle_Bit(PORTB,(PinNum-PORTB_START));
 2d2:	48 b3       	in	r20, 0x18	; 24
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_togglePin+0x34>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	9a 95       	dec	r25
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_togglePin+0x30>
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 27       	eor	r24, r20
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	08 95       	ret
	}
	else if(PinNum >= PORTC_START && PinNum <=PORTC_END){
 2ec:	90 ef       	ldi	r25, 0xF0	; 240
 2ee:	98 0f       	add	r25, r24
 2f0:	98 30       	cpi	r25, 0x08	; 8
 2f2:	68 f4       	brcc	.+26     	; 0x30e <DIO_togglePin+0x62>
		Togle_Bit(PORTC,(PinNum-PORTC_START));
 2f4:	45 b3       	in	r20, 0x15	; 21
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_togglePin+0x56>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	9a 95       	dec	r25
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_togglePin+0x52>
 306:	cb 01       	movw	r24, r22
 308:	84 27       	eor	r24, r20
 30a:	85 bb       	out	0x15, r24	; 21
 30c:	08 95       	ret
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 30e:	98 ee       	ldi	r25, 0xE8	; 232
 310:	98 0f       	add	r25, r24
 312:	98 30       	cpi	r25, 0x08	; 8
 314:	60 f4       	brcc	.+24     	; 0x32e <DIO_togglePin+0x82>
		Togle_Bit(PIND,(PinNum-PORTD_START));
 316:	40 b3       	in	r20, 0x10	; 16
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_togglePin+0x78>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	9a 95       	dec	r25
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_togglePin+0x74>
 328:	cb 01       	movw	r24, r22
 32a:	84 27       	eor	r24, r20
 32c:	80 bb       	out	0x10, r24	; 16
 32e:	08 95       	ret

00000330 <LedInit>:
/*Function outputs :- N/A                                                                         */
/**************************************************************************************************/
void LedInit(uint8 pin_num)
{
	/* set direction of desired led to be output */
	DIO_SetPinDirection(pin_num,HIGH);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	0e 94 c6 00 	call	0x18c	; 0x18c <DIO_SetPinDirection>
 336:	08 95       	ret

00000338 <LedState>:
/*Function outputs :- N/A                                                                         */
/**************************************************************************************************/
void LedState(uint8 pin_num, STATUS t)
{
	/* switch on led's status to apply action on led */
switch(t)
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	41 f0       	breq	.+16     	; 0x34c <LedState+0x14>
 33c:	18 f0       	brcs	.+6      	; 0x344 <LedState+0xc>
 33e:	62 30       	cpi	r22, 0x02	; 2
 340:	49 f0       	breq	.+18     	; 0x354 <LedState+0x1c>
 342:	08 95       	ret
{
	/* write zero to led */
	case OFF :
	DIO_WritePin(pin_num,OFF);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	break;
 34a:	08 95       	ret
	/*write one to led pin */
	case ON :
	DIO_WritePin(pin_num,ON);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_WritePin>
	break;
 352:	08 95       	ret
	/* toggle led pin by call toggling pin */
	case TOGGLE :
	DIO_togglePin(pin_num);
 354:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_togglePin>
 358:	08 95       	ret

0000035a <main>:
#include "../Includes/DIO_driver.h"

int main(void)
{
	uint8 temp;
	UART_Init();
 35a:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Init>
	/* initialize all leds */
     LedInit(led0);
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 98 01 	call	0x330	; 0x330 <LedInit>
	 LedInit(led1);
 364:	8d e0       	ldi	r24, 0x0D	; 13
 366:	0e 94 98 01 	call	0x330	; 0x330 <LedInit>
	 LedInit(led2);
 36a:	8e e0       	ldi	r24, 0x0E	; 14
 36c:	0e 94 98 01 	call	0x330	; 0x330 <LedInit>
	 LedInit(led3);
 370:	8f e0       	ldi	r24, 0x0F	; 15
 372:	0e 94 98 01 	call	0x330	; 0x330 <LedInit>
    while (1) 
    {
		/* receive value by uart and save it in temp variable */ 
		temp = UART_receive();
 376:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <UART_receive>
		/* switch on temp value */
		switch (temp)
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	09 f1       	breq	.+66     	; 0x3c0 <main+0x66>
 37e:	28 f4       	brcc	.+10     	; 0x38a <main+0x30>
 380:	88 23       	and	r24, r24
 382:	41 f0       	breq	.+16     	; 0x394 <main+0x3a>
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	b9 f0       	breq	.+46     	; 0x3b6 <main+0x5c>
 388:	f6 cf       	rjmp	.-20     	; 0x376 <main+0x1c>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	f1 f0       	breq	.+60     	; 0x3ca <main+0x70>
 38e:	84 30       	cpi	r24, 0x04	; 4
 390:	09 f1       	breq	.+66     	; 0x3d4 <main+0x7a>
 392:	f1 cf       	rjmp	.-30     	; 0x376 <main+0x1c>
		{
			case  0 :
			/* case zero all leds off */
			LedState(led0,OFF);
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8c e0       	ldi	r24, 0x0C	; 12
 398:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			LedState(led1,OFF);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	8d e0       	ldi	r24, 0x0D	; 13
 3a0:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			LedState(led2,OFF);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			LedState(led3,OFF);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	8f e0       	ldi	r24, 0x0F	; 15
 3b0:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			break;
 3b4:	e0 cf       	rjmp	.-64     	; 0x376 <main+0x1c>
			case 1 :
			LedState(led0,ON);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			break ;
 3be:	db cf       	rjmp	.-74     	; 0x376 <main+0x1c>
			case  2 :
			LedState(led1,ON);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	8d e0       	ldi	r24, 0x0D	; 13
 3c4:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			break;
 3c8:	d6 cf       	rjmp	.-84     	; 0x376 <main+0x1c>
			case 3 :
			LedState(led2,ON);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	8e e0       	ldi	r24, 0x0E	; 14
 3ce:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			break ;
 3d2:	d1 cf       	rjmp	.-94     	; 0x376 <main+0x1c>
			case  4 :
			LedState(led3,ON);
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	8f e0       	ldi	r24, 0x0F	; 15
 3d8:	0e 94 9c 01 	call	0x338	; 0x338 <LedState>
			break;
 3dc:	cc cf       	rjmp	.-104    	; 0x376 <main+0x1c>

000003de <UART_Init>:
void UART_Transmit(uint8 data)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!Get_Bit(UCSRA,UDRE));
	/* sending 1 byte through data register */
	UDR = data ;
 3de:	80 b5       	in	r24, 0x20	; 32
 3e0:	86 68       	ori	r24, 0x86	; 134
 3e2:	80 bd       	out	0x20, r24	; 32
 3e4:	59 9a       	sbi	0x0b, 1	; 11
 3e6:	8a b1       	in	r24, 0x0a	; 10
 3e8:	88 61       	ori	r24, 0x18	; 24
 3ea:	8a b9       	out	0x0a, r24	; 10
 3ec:	10 bc       	out	0x20, r1	; 32
 3ee:	8f ec       	ldi	r24, 0xCF	; 207
 3f0:	89 b9       	out	0x09, r24	; 9
 3f2:	08 95       	ret

000003f4 <UART_receive>:


uint8 UART_receive(void)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!Get_Bit(UCSRA,RXC));
 3f4:	5f 9b       	sbis	0x0b, 7	; 11
 3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <UART_receive>
	/* receiving 1 byte through data register */
	 return UDR; 
 3f8:	8c b1       	in	r24, 0x0c	; 12
	
}
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
