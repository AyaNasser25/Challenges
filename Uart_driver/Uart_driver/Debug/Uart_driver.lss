
Uart_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075a  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010d  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "../Includes/UART_cfg.h"


int main(void)
{
	UART_Init();
  6c:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>
	if(UART_receive()){
  70:	0e 94 4f 00 	call	0x9e	; 0x9e <UART_receive>
  74:	88 23       	and	r24, r24
  76:	19 f0       	breq	.+6      	; 0x7e <main+0x12>
		UART_Transmit('c');
  78:	83 e6       	ldi	r24, 0x63	; 99
  7a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x12>

00000080 <UART_Init>:
			break ;
			/* bit UCSZ1 = 1 to activate 7-bit character size */
			case seven_bit : UCSRC |=  (TRUE<<URSEL) | (TRUE<<UCSZ1);
			break ;
			/* bit UCSZ0 = 1 and UCSZ1 = 1 to activate 8-bit as a character size */
			case eight_bit : UCSRC |= (TRUE<<URSEL) | (TRUE<<UCSZ0) | (TRUE<<UCSZ1);
  80:	80 b5       	in	r24, 0x20	; 32
  82:	86 68       	ori	r24, 0x86	; 134
  84:	80 bd       	out	0x20, r24	; 32
			break ;
			
		}
	/* using double speed transmission option  */
	if(ON == U1.SpeedMode){
	 UCSRA |= (TRUE<<U2X);
  86:	59 9a       	sbi	0x0b, 1	; 11
	else{
		  /* equation of baud rate at normal mode condition */
		 UBRR = (F_CPU/(16*U1.BaudRate))-TRUE;
	}
	 /* enabling receiving and transmitting bits */
	 UCSRB |= (TRUE<<RXEN) | (TRUE<<TXEN) ;
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	88 61       	ori	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
	
	/* entering baud rate */
	 UBRRH = UBRR >> eight_bit;
  8e:	10 bc       	out	0x20, r1	; 32
	 UBRRL = UBRR ;
  90:	8f ec       	ldi	r24, 0xCF	; 207
  92:	89 b9       	out	0x09, r24	; 9
  94:	08 95       	ret

00000096 <UART_Transmit>:


void UART_Transmit(uint8 data)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!Get_Bit(UCSRA,UDRE));
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <UART_Transmit>
	/* sending 1 byte through data register */
	UDR = data ;
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <UART_receive>:


uint8 UART_receive(void)
{
	/* polling until flag is set then clear it by writing 1 */
	while(!Get_Bit(UCSRA,RXC));
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <UART_receive>
	/* receiving 1 byte through data register */
	 return UDR; 
  a2:	8c b1       	in	r24, 0x0c	; 12
	
}
  a4:	08 95       	ret

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
