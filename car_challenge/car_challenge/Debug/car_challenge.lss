
car_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000116a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  0000116a  000011fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fa  008000ee  008000ee  0000128c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e98  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba6  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001385  00000000  00000000  00003eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  0000523c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094a  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b58  00000000  00000000  00005fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00007b0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1d 03 	jmp	0x63a	; 0x63a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3e       	cpi	r26, 0xE8	; 232
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
      8a:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
		return (Get_Bit(PIND,(PinNum-PORTD_START)));
	}
	return FALSE;
}
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	00 f5       	brcc	.+64     	; 0xd6 <DIO_WritePin+0x44>
      96:	66 23       	and	r22, r22
      98:	81 f0       	breq	.+32     	; 0xba <DIO_WritePin+0x28>
      9a:	61 30       	cpi	r22, 0x01	; 1
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_WritePin+0xe>
      9e:	88 c0       	rjmp	.+272    	; 0x1b0 <DIO_WritePin+0x11e>
      a0:	4b b3       	in	r20, 0x1b	; 27
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	b9 01       	movw	r22, r18
      a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_WritePin+0x1c>
      aa:	66 0f       	add	r22, r22
      ac:	77 1f       	adc	r23, r23
      ae:	8a 95       	dec	r24
      b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_WritePin+0x18>
      b2:	cb 01       	movw	r24, r22
      b4:	84 2b       	or	r24, r20
      b6:	8b bb       	out	0x1b, r24	; 27
      b8:	08 95       	ret
      ba:	4b b3       	in	r20, 0x1b	; 27
      bc:	21 e0       	ldi	r18, 0x01	; 1
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	b9 01       	movw	r22, r18
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x36>
      c4:	66 0f       	add	r22, r22
      c6:	77 1f       	adc	r23, r23
      c8:	8a 95       	dec	r24
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x32>
      cc:	cb 01       	movw	r24, r22
      ce:	80 95       	com	r24
      d0:	84 23       	and	r24, r20
      d2:	8b bb       	out	0x1b, r24	; 27
      d4:	08 95       	ret
      d6:	98 ef       	ldi	r25, 0xF8	; 248
      d8:	98 0f       	add	r25, r24
      da:	98 30       	cpi	r25, 0x08	; 8
      dc:	08 f5       	brcc	.+66     	; 0x120 <DIO_WritePin+0x8e>
      de:	66 23       	and	r22, r22
      e0:	81 f0       	breq	.+32     	; 0x102 <DIO_WritePin+0x70>
      e2:	61 30       	cpi	r22, 0x01	; 1
      e4:	09 f0       	breq	.+2      	; 0xe8 <DIO_WritePin+0x56>
      e6:	64 c0       	rjmp	.+200    	; 0x1b0 <DIO_WritePin+0x11e>
      e8:	48 b3       	in	r20, 0x18	; 24
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	b9 01       	movw	r22, r18
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_WritePin+0x64>
      f2:	66 0f       	add	r22, r22
      f4:	77 1f       	adc	r23, r23
      f6:	9a 95       	dec	r25
      f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_WritePin+0x60>
      fa:	cb 01       	movw	r24, r22
      fc:	84 2b       	or	r24, r20
      fe:	88 bb       	out	0x18, r24	; 24
     100:	08 95       	ret
     102:	48 b3       	in	r20, 0x18	; 24
     104:	88 50       	subi	r24, 0x08	; 8
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	b9 01       	movw	r22, r18
     10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_WritePin+0x80>
     10e:	66 0f       	add	r22, r22
     110:	77 1f       	adc	r23, r23
     112:	8a 95       	dec	r24
     114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_WritePin+0x7c>
     116:	cb 01       	movw	r24, r22
     118:	80 95       	com	r24
     11a:	84 23       	and	r24, r20
     11c:	88 bb       	out	0x18, r24	; 24
     11e:	08 95       	ret
     120:	90 ef       	ldi	r25, 0xF0	; 240
     122:	98 0f       	add	r25, r24
     124:	98 30       	cpi	r25, 0x08	; 8
     126:	08 f5       	brcc	.+66     	; 0x16a <DIO_WritePin+0xd8>
     128:	66 23       	and	r22, r22
     12a:	81 f0       	breq	.+32     	; 0x14c <DIO_WritePin+0xba>
     12c:	61 30       	cpi	r22, 0x01	; 1
     12e:	09 f0       	breq	.+2      	; 0x132 <DIO_WritePin+0xa0>
     130:	3f c0       	rjmp	.+126    	; 0x1b0 <DIO_WritePin+0x11e>
     132:	45 b3       	in	r20, 0x15	; 21
     134:	21 e0       	ldi	r18, 0x01	; 1
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	b9 01       	movw	r22, r18
     13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_WritePin+0xae>
     13c:	66 0f       	add	r22, r22
     13e:	77 1f       	adc	r23, r23
     140:	9a 95       	dec	r25
     142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_WritePin+0xaa>
     144:	cb 01       	movw	r24, r22
     146:	84 2b       	or	r24, r20
     148:	85 bb       	out	0x15, r24	; 21
     14a:	08 95       	ret
     14c:	45 b3       	in	r20, 0x15	; 21
     14e:	80 51       	subi	r24, 0x10	; 16
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	b9 01       	movw	r22, r18
     156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_WritePin+0xca>
     158:	66 0f       	add	r22, r22
     15a:	77 1f       	adc	r23, r23
     15c:	8a 95       	dec	r24
     15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_WritePin+0xc6>
     160:	cb 01       	movw	r24, r22
     162:	80 95       	com	r24
     164:	84 23       	and	r24, r20
     166:	85 bb       	out	0x15, r24	; 21
     168:	08 95       	ret
     16a:	98 ee       	ldi	r25, 0xE8	; 232
     16c:	98 0f       	add	r25, r24
     16e:	98 30       	cpi	r25, 0x08	; 8
     170:	f8 f4       	brcc	.+62     	; 0x1b0 <DIO_WritePin+0x11e>
     172:	66 23       	and	r22, r22
     174:	79 f0       	breq	.+30     	; 0x194 <DIO_WritePin+0x102>
     176:	61 30       	cpi	r22, 0x01	; 1
     178:	d9 f4       	brne	.+54     	; 0x1b0 <DIO_WritePin+0x11e>
     17a:	42 b3       	in	r20, 0x12	; 18
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	b9 01       	movw	r22, r18
     182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_WritePin+0xf6>
     184:	66 0f       	add	r22, r22
     186:	77 1f       	adc	r23, r23
     188:	9a 95       	dec	r25
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_WritePin+0xf2>
     18c:	cb 01       	movw	r24, r22
     18e:	84 2b       	or	r24, r20
     190:	82 bb       	out	0x12, r24	; 18
     192:	08 95       	ret
     194:	42 b3       	in	r20, 0x12	; 18
     196:	88 51       	subi	r24, 0x18	; 24
     198:	21 e0       	ldi	r18, 0x01	; 1
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	b9 01       	movw	r22, r18
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_WritePin+0x112>
     1a0:	66 0f       	add	r22, r22
     1a2:	77 1f       	adc	r23, r23
     1a4:	8a 95       	dec	r24
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_WritePin+0x10e>
     1a8:	cb 01       	movw	r24, r22
     1aa:	80 95       	com	r24
     1ac:	84 23       	and	r24, r20
     1ae:	82 bb       	out	0x12, r24	; 18
     1b0:	08 95       	ret

000001b2 <DIO_SetPinDirection>:
* function arguments :- pin number and desired direction (I/O)                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	/* according to pin number calculate the corresponding port to set its direction */
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
     1b2:	88 30       	cpi	r24, 0x08	; 8
     1b4:	00 f5       	brcc	.+64     	; 0x1f6 <DIO_SetPinDirection+0x44>
		switch(PinDirection){
     1b6:	66 23       	and	r22, r22
     1b8:	81 f0       	breq	.+32     	; 0x1da <DIO_SetPinDirection+0x28>
     1ba:	61 30       	cpi	r22, 0x01	; 1
     1bc:	09 f0       	breq	.+2      	; 0x1c0 <DIO_SetPinDirection+0xe>
     1be:	88 c0       	rjmp	.+272    	; 0x2d0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRA,PinNum);
     1c0:	4a b3       	in	r20, 0x1a	; 26
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	b9 01       	movw	r22, r18
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SetPinDirection+0x1c>
     1ca:	66 0f       	add	r22, r22
     1cc:	77 1f       	adc	r23, r23
     1ce:	8a 95       	dec	r24
     1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SetPinDirection+0x18>
     1d2:	cb 01       	movw	r24, r22
     1d4:	84 2b       	or	r24, r20
     1d6:	8a bb       	out	0x1a, r24	; 26
			break;
     1d8:	08 95       	ret
			case LOW : Clear_Bit(DDRA,PinNum);
     1da:	4a b3       	in	r20, 0x1a	; 26
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	b9 01       	movw	r22, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPinDirection+0x36>
     1e4:	66 0f       	add	r22, r22
     1e6:	77 1f       	adc	r23, r23
     1e8:	8a 95       	dec	r24
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPinDirection+0x32>
     1ec:	cb 01       	movw	r24, r22
     1ee:	80 95       	com	r24
     1f0:	84 23       	and	r24, r20
     1f2:	8a bb       	out	0x1a, r24	; 26
			break;
     1f4:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
     1f6:	98 ef       	ldi	r25, 0xF8	; 248
     1f8:	98 0f       	add	r25, r24
     1fa:	98 30       	cpi	r25, 0x08	; 8
     1fc:	08 f5       	brcc	.+66     	; 0x240 <DIO_SetPinDirection+0x8e>
		switch(PinDirection){
     1fe:	66 23       	and	r22, r22
     200:	81 f0       	breq	.+32     	; 0x222 <DIO_SetPinDirection+0x70>
     202:	61 30       	cpi	r22, 0x01	; 1
     204:	09 f0       	breq	.+2      	; 0x208 <DIO_SetPinDirection+0x56>
     206:	64 c0       	rjmp	.+200    	; 0x2d0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRB,(PinNum-PORTB_START));
     208:	47 b3       	in	r20, 0x17	; 23
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	b9 01       	movw	r22, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinDirection+0x64>
     212:	66 0f       	add	r22, r22
     214:	77 1f       	adc	r23, r23
     216:	9a 95       	dec	r25
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinDirection+0x60>
     21a:	cb 01       	movw	r24, r22
     21c:	84 2b       	or	r24, r20
     21e:	87 bb       	out	0x17, r24	; 23
			break;
     220:	08 95       	ret
			case LOW : Clear_Bit(DDRB,(PinNum-PORTB_START));
     222:	47 b3       	in	r20, 0x17	; 23
     224:	88 50       	subi	r24, 0x08	; 8
     226:	21 e0       	ldi	r18, 0x01	; 1
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	b9 01       	movw	r22, r18
     22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinDirection+0x80>
     22e:	66 0f       	add	r22, r22
     230:	77 1f       	adc	r23, r23
     232:	8a 95       	dec	r24
     234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinDirection+0x7c>
     236:	cb 01       	movw	r24, r22
     238:	80 95       	com	r24
     23a:	84 23       	and	r24, r20
     23c:	87 bb       	out	0x17, r24	; 23
			break;
     23e:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
     240:	90 ef       	ldi	r25, 0xF0	; 240
     242:	98 0f       	add	r25, r24
     244:	98 30       	cpi	r25, 0x08	; 8
     246:	08 f5       	brcc	.+66     	; 0x28a <DIO_SetPinDirection+0xd8>
		switch(PinDirection){
     248:	66 23       	and	r22, r22
     24a:	81 f0       	breq	.+32     	; 0x26c <DIO_SetPinDirection+0xba>
     24c:	61 30       	cpi	r22, 0x01	; 1
     24e:	09 f0       	breq	.+2      	; 0x252 <DIO_SetPinDirection+0xa0>
     250:	3f c0       	rjmp	.+126    	; 0x2d0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRC,(PinNum-PORTC_START));
     252:	44 b3       	in	r20, 0x14	; 20
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	b9 01       	movw	r22, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SetPinDirection+0xae>
     25c:	66 0f       	add	r22, r22
     25e:	77 1f       	adc	r23, r23
     260:	9a 95       	dec	r25
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SetPinDirection+0xaa>
     264:	cb 01       	movw	r24, r22
     266:	84 2b       	or	r24, r20
     268:	84 bb       	out	0x14, r24	; 20
			break;
     26a:	08 95       	ret
			case LOW : Clear_Bit(DDRC,(PinNum-PORTC_START));
     26c:	44 b3       	in	r20, 0x14	; 20
     26e:	80 51       	subi	r24, 0x10	; 16
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	b9 01       	movw	r22, r18
     276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0xca>
     278:	66 0f       	add	r22, r22
     27a:	77 1f       	adc	r23, r23
     27c:	8a 95       	dec	r24
     27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0xc6>
     280:	cb 01       	movw	r24, r22
     282:	80 95       	com	r24
     284:	84 23       	and	r24, r20
     286:	84 bb       	out	0x14, r24	; 20
			break;
     288:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
     28a:	98 ee       	ldi	r25, 0xE8	; 232
     28c:	98 0f       	add	r25, r24
     28e:	98 30       	cpi	r25, 0x08	; 8
     290:	f8 f4       	brcc	.+62     	; 0x2d0 <DIO_SetPinDirection+0x11e>
		switch(PinDirection){
     292:	66 23       	and	r22, r22
     294:	79 f0       	breq	.+30     	; 0x2b4 <DIO_SetPinDirection+0x102>
     296:	61 30       	cpi	r22, 0x01	; 1
     298:	d9 f4       	brne	.+54     	; 0x2d0 <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRD,(PinNum-PORTD_START));
     29a:	41 b3       	in	r20, 0x11	; 17
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b9 01       	movw	r22, r18
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDirection+0xf6>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	9a 95       	dec	r25
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDirection+0xf2>
     2ac:	cb 01       	movw	r24, r22
     2ae:	84 2b       	or	r24, r20
     2b0:	81 bb       	out	0x11, r24	; 17
			break;
     2b2:	08 95       	ret
			case LOW : Clear_Bit(DDRD,(PinNum-PORTD_START));
     2b4:	41 b3       	in	r20, 0x11	; 17
     2b6:	88 51       	subi	r24, 0x18	; 24
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	b9 01       	movw	r22, r18
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_SetPinDirection+0x112>
     2c0:	66 0f       	add	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_SetPinDirection+0x10e>
     2c8:	cb 01       	movw	r24, r22
     2ca:	80 95       	com	r24
     2cc:	84 23       	and	r24, r20
     2ce:	81 bb       	out	0x11, r24	; 17
     2d0:	08 95       	ret

000002d2 <main>:
#define SYSTEM_FREQ	16000000ULL

int main(void)

{
	PWM_Init();
     2d2:	0e 94 8f 02 	call	0x51e	; 0x51e <PWM_Init>
	PWM_Generate(50,200);
     2d6:	48 ec       	ldi	r20, 0xC8	; 200
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	82 e3       	ldi	r24, 0x32	; 50
     2e0:	0e 94 b1 02 	call	0x562	; 0x562 <PWM_Generate>
	
	
	int* DataReceived;
	

	Disable_Interrupts();
     2e4:	f8 94       	cli
	UART_Init(9600,ESP_FillResponseBuffer);
     2e6:	47 e6       	ldi	r20, 0x67	; 103
     2e8:	54 e0       	ldi	r21, 0x04	; 4
     2ea:	60 e8       	ldi	r22, 0x80	; 128
     2ec:	75 e2       	ldi	r23, 0x25	; 37
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <UART_Init>
	Enable_Interrupts();
     2f6:	78 94       	sei
	
	WIFI_Service_Start(Server, "4444", "aya", "1234567890", NULL, NULL, NULL, NULL);
     2f8:	a1 2c       	mov	r10, r1
     2fa:	b1 2c       	mov	r11, r1
     2fc:	c1 2c       	mov	r12, r1
     2fe:	d1 2c       	mov	r13, r1
     300:	e1 2c       	mov	r14, r1
     302:	f1 2c       	mov	r15, r1
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	10 e0       	ldi	r17, 0x00	; 0
     308:	20 e6       	ldi	r18, 0x60	; 96
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4b e6       	ldi	r20, 0x6B	; 107
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	6f e6       	ldi	r22, 0x6F	; 111
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 58 08 	call	0x10b0	; 0x10b0 <WIFI_Service_Start>
	
	while(OK_Status!=ESP_SendData("Wifi Demo Started","17"));
     31a:	64 e7       	ldi	r22, 0x74	; 116
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	87 e7       	ldi	r24, 0x77	; 119
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 16 07 	call	0xe2c	; 0xe2c <ESP_SendData>
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	c1 f7       	brne	.-16     	; 0x31a <main+0x48>
	DDRB |= (1<<4);
     32a:	bc 9a       	sbi	0x17, 4	; 23
	DataReceived=NO_Response;
	//while(NO_Response==DataReceived)
	//{
	while(1){
		/* receive data from wifi into datareceived pointer */
		DataReceived=ESP_ReceiveData();
     32c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <ESP_ReceiveData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     330:	2f e3       	ldi	r18, 0x3F	; 63
     332:	3d e0       	ldi	r19, 0x0D	; 13
     334:	43 e0       	ldi	r20, 0x03	; 3
     336:	21 50       	subi	r18, 0x01	; 1
     338:	30 40       	sbci	r19, 0x00	; 0
     33a:	40 40       	sbci	r20, 0x00	; 0
     33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x64>
     33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0x6e>
     340:	00 00       	nop
		_delay_ms(1000);
		/* check on the recieveddata value if it equal character F */
		switch (*DataReceived)
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	83 35       	cpi	r24, 0x53	; 83
     34a:	91 05       	cpc	r25, r1
     34c:	c1 f0       	breq	.+48     	; 0x37e <main+0xac>
     34e:	3c f4       	brge	.+14     	; 0x35e <main+0x8c>
     350:	81 34       	cpi	r24, 0x41	; 65
     352:	91 05       	cpc	r25, r1
     354:	69 f1       	breq	.+90     	; 0x3b0 <main+0xde>
     356:	84 34       	cpi	r24, 0x44	; 68
     358:	91 05       	cpc	r25, r1
     35a:	09 f1       	breq	.+66     	; 0x39e <main+0xcc>
     35c:	e7 cf       	rjmp	.-50     	; 0x32c <main+0x5a>
     35e:	87 35       	cpi	r24, 0x57	; 87
     360:	91 05       	cpc	r25, r1
     362:	21 f0       	breq	.+8      	; 0x36c <main+0x9a>
     364:	88 35       	cpi	r24, 0x58	; 88
     366:	91 05       	cpc	r25, r1
     368:	99 f0       	breq	.+38     	; 0x390 <main+0xbe>
     36a:	e0 cf       	rjmp	.-64     	; 0x32c <main+0x5a>
		{
			case 'W' :
			/* move car in the forward direction */
			MOTOR_turnOn(FORWARD,1);
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
			MOTOR_turnOn(FORWARD,2);
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
			break ;
     37c:	d7 cf       	rjmp	.-82     	; 0x32c <main+0x5a>
		   
		case 'S' :
		
			/* if recieved data is r move car in the back direction */
			MOTOR_turnOn(BACKWARD,1);
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
			MOTOR_turnOn(BACKWARD,2);
     386:	62 e0       	ldi	r22, 0x02	; 2
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
			break;
     38e:	ce cf       	rjmp	.-100    	; 0x32c <main+0x5a>
		
	case 'X' :
		/* if recieved data is x then stop car */
			MOTOR_turnOff(1);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	0e 94 70 02 	call	0x4e0	; 0x4e0 <MOTOR_turnOff>
			MOTOR_turnOff(2);
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 70 02 	call	0x4e0	; 0x4e0 <MOTOR_turnOff>
			break;
     39c:	c7 cf       	rjmp	.-114    	; 0x32c <main+0x5a>
     case  'D' :
	 /* if recieved data is d then move right */
 				MOTOR_turnOn(FORWARD,1);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
				MOTOR_turnOn(BACKWARD,2);
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
				break;
     3ae:	be cf       	rjmp	.-132    	; 0x32c <main+0x5a>
		case 'A' :
		/* if recieved data is x then move left */
					MOTOR_turnOn(BACKWARD,1);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
					MOTOR_turnOn(FORWARD,2);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <MOTOR_turnOn>
			break;
     3c0:	b5 cf       	rjmp	.-150    	; 0x32c <main+0x5a>

000003c2 <MOTOR_turnOn>:
/* Function inputs :-direction of rotation and motor number                                             */
/* Function outputs :- N/A                                                                              */
/********************************************************************************************************/

void MOTOR_turnOn(uint8 direction,uint8 motor_num)
{
     3c2:	cf 93       	push	r28
     3c4:	c8 2f       	mov	r28, r24
	
	switch(motor_num){
     3c6:	61 30       	cpi	r22, 0x01	; 1
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <MOTOR_turnOn+0x10>
     3ca:	62 30       	cpi	r22, 0x02	; 2
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <MOTOR_turnOn+0xe>
     3ce:	44 c0       	rjmp	.+136    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     3d0:	85 c0       	rjmp	.+266    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		case NUM_1 :
		/* set direction pins of motors to be output */
		DIO_SetPinDirection(MOTORA_PIN1,OUT);
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8a e1       	ldi	r24, 0x1A	; 26
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_SetPinDirection>
		DIO_SetPinDirection(MOTORA_PIN2,OUT);
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	8b e1       	ldi	r24, 0x1B	; 27
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_SetPinDirection>
		switch(direction)
     3ea:	c1 30       	cpi	r28, 0x01	; 1
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <MOTOR_turnOn+0x32>
     3ee:	c2 30       	cpi	r28, 0x02	; 2
     3f0:	d1 f0       	breq	.+52     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     3f2:	74 c0       	rjmp	.+232    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		{
			case FORWARD :
			/* turn them off first */
			DIO_WritePin(MOTORA_PIN1,LOW);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	8a e1       	ldi	r24, 0x1A	; 26
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORA_PIN2,LOW);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8b e1       	ldi	r24, 0x1B	; 27
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			/* then set pin 1 to high and pin 2 to zero to be forward */
			DIO_WritePin(MOTORA_PIN1,HIGH);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	8a e1       	ldi	r24, 0x1A	; 26
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORA_PIN2,LOW);
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	8b e1       	ldi	r24, 0x1B	; 27
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			
			break ;
     424:	5b c0       	rjmp	.+182    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			case BACKWARD :
			/* turn motor off first */
			DIO_WritePin(MOTORA_PIN1,LOW);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	8a e1       	ldi	r24, 0x1A	; 26
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORA_PIN2,LOW);
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	8b e1       	ldi	r24, 0x1B	; 27
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			/* then set pin 2 to high and pin 1 to zero to be backword */
			
			DIO_WritePin(MOTORA_PIN1,LOW);
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	8a e1       	ldi	r24, 0x1A	; 26
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORA_PIN2,HIGH);
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	8b e1       	ldi	r24, 0x1B	; 27
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			
			break ;
     456:	42 c0       	rjmp	.+132    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		}
		break;
		/* motor 2 */
		case  NUM_2 :
			/* set direction pins of motors to be output */
		DIO_SetPinDirection(MOTORB_PIN1,OUT);
     458:	61 e0       	ldi	r22, 0x01	; 1
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	8e e1       	ldi	r24, 0x1E	; 30
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_SetPinDirection>
		DIO_SetPinDirection(MOTORB_PIN2,OUT);
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	8f e1       	ldi	r24, 0x1F	; 31
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_SetPinDirection>
		
		switch(direction)
     470:	c1 30       	cpi	r28, 0x01	; 1
     472:	19 f0       	breq	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     474:	c2 30       	cpi	r28, 0x02	; 2
     476:	d1 f0       	breq	.+52     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     478:	31 c0       	rjmp	.+98     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		{
			case FORWARD :
			/* turn them off first */
			DIO_WritePin(MOTORB_PIN1,LOW);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	8e e1       	ldi	r24, 0x1E	; 30
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORB_PIN2,LOW);
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	8f e1       	ldi	r24, 0x1F	; 31
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			/* then set pin 1 to high and pin 2 to zero to be forward */
			DIO_WritePin(MOTORB_PIN1,HIGH);
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	8e e1       	ldi	r24, 0x1E	; 30
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORB_PIN2,LOW);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8f e1       	ldi	r24, 0x1F	; 31
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			break ;
     4aa:	18 c0       	rjmp	.+48     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			case BACKWARD :
			/* turn motor off first */
			DIO_WritePin(MOTORB_PIN1,LOW);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	8e e1       	ldi	r24, 0x1E	; 30
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORB_PIN2,LOW);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	8f e1       	ldi	r24, 0x1F	; 31
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			
				/* then set pin 2 to high and pin 1 to zero to be backword */
			DIO_WritePin(MOTORB_PIN1,LOW);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8e e1       	ldi	r24, 0x1E	; 30
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(MOTORB_PIN2,HIGH);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	8f e1       	ldi	r24, 0x1F	; 31
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			
		}

          break;
	}
}
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <MOTOR_turnOff>:
/********************************************************************************************************/

void MOTOR_turnOff(uint8 motor_num)
{
		/* write zero to all pins */
		switch (motor_num){
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	19 f0       	breq	.+6      	; 0x4ea <MOTOR_turnOff+0xa>
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	71 f0       	breq	.+28     	; 0x504 <MOTOR_turnOff+0x24>
     4e8:	08 95       	ret
		case NUM_1 :
		DIO_WritePin(MOTORA_PIN1,LOW);
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	8a e1       	ldi	r24, 0x1A	; 26
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		DIO_WritePin(MOTORA_PIN2,LOW);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	8b e1       	ldi	r24, 0x1B	; 27
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		break ;
     502:	08 95       	ret
		case NUM_2 :
		DIO_WritePin(MOTORB_PIN1,LOW);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	8e e1       	ldi	r24, 0x1E	; 30
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
		DIO_WritePin(MOTORB_PIN2,LOW);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	8f e1       	ldi	r24, 0x1F	; 31
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
     51c:	08 95       	ret

0000051e <PWM_Init>:
* in the header file Timer.h
********************************************************************************/
void PWM_Init(){
	
	#ifdef F_PWM
	Set_Bit(TIMER1->TCCRA,WGM11);
     51e:	8f b5       	in	r24, 0x2f	; 47
     520:	82 60       	ori	r24, 0x02	; 2
     522:	8f bd       	out	0x2f, r24	; 47
	Clear_Bit(TIMER1->TCCRA,WGM10);
     524:	8f b5       	in	r24, 0x2f	; 47
     526:	8e 7f       	andi	r24, 0xFE	; 254
     528:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TIMER1->TCCRB,WGM12);
     52a:	8e b5       	in	r24, 0x2e	; 46
     52c:	88 60       	ori	r24, 0x08	; 8
     52e:	8e bd       	out	0x2e, r24	; 46
	Set_Bit(TIMER1->TCCRB,WGM13);
     530:	8e b5       	in	r24, 0x2e	; 46
     532:	80 61       	ori	r24, 0x10	; 16
     534:	8e bd       	out	0x2e, r24	; 46
	Set_Bit(TIMER1->TCCRB,CS10_PIN);
	Clear_Bit(TIMER1->TCCRB,CS11_PIN);
	Clear_Bit(TIMER1->TCCRB,CS12_PIN);
	#endif
	#ifdef INVERTING
	Set_Bit(TIMER1->TCCRA,COM1A0_PIN);
     536:	8f b5       	in	r24, 0x2f	; 47
     538:	80 64       	ori	r24, 0x40	; 64
     53a:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TIMER1->TCCRA,COM1A1_PIN);
     53c:	8f b5       	in	r24, 0x2f	; 47
     53e:	80 68       	ori	r24, 0x80	; 128
     540:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TIMER1->TCCRA,COM1B0_PIN);
     542:	8f b5       	in	r24, 0x2f	; 47
     544:	80 61       	ori	r24, 0x10	; 16
     546:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TIMER1->TCCRA,COM1B1_PIN);
     548:	8f b5       	in	r24, 0x2f	; 47
     54a:	80 62       	ori	r24, 0x20	; 32
     54c:	8f bd       	out	0x2f, r24	; 47
	/* set prescelar one */
	Set_Bit(TIMER1->TCCRB,CS10_PIN);
     54e:	8e b5       	in	r24, 0x2e	; 46
     550:	81 60       	ori	r24, 0x01	; 1
     552:	8e bd       	out	0x2e, r24	; 46
	Clear_Bit(TIMER1->TCCRB,CS11_PIN);
     554:	8e b5       	in	r24, 0x2e	; 46
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	8e bd       	out	0x2e, r24	; 46
	Clear_Bit(TIMER1->TCCRB,CS12_PIN);
     55a:	8e b5       	in	r24, 0x2e	; 46
     55c:	8b 7f       	andi	r24, 0xFB	; 251
     55e:	8e bd       	out	0x2e, r24	; 46
     560:	08 95       	ret

00000562 <PWM_Generate>:
	#endif
	#endif

	
}
void PWM_Generate(uint8 Copy_u8DutyCycle,uint32 Copy_u32freq){
     562:	cf 93       	push	r28
     564:	c8 2f       	mov	r28, r24
	
	#endif
	#ifdef INVERTING
	
	/* set ocr value */
	Local_Top=(F_CPU/(NUM_2*Copy_u32freq));
     566:	9a 01       	movw	r18, r20
     568:	ab 01       	movw	r20, r22
     56a:	22 0f       	add	r18, r18
     56c:	33 1f       	adc	r19, r19
     56e:	44 1f       	adc	r20, r20
     570:	55 1f       	adc	r21, r21
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	74 e2       	ldi	r23, 0x24	; 36
     576:	84 ef       	ldi	r24, 0xF4	; 244
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 82 08 	call	0x1104	; 0x1104 <__udivmodsi4>
     57e:	42 2f       	mov	r20, r18
     580:	53 2f       	mov	r21, r19
	Local_Comp_Value=((Local_Top/100)*(100-Copy_u8DutyCycle));
     582:	36 95       	lsr	r19
     584:	27 95       	ror	r18
     586:	36 95       	lsr	r19
     588:	27 95       	ror	r18
     58a:	ab e7       	ldi	r26, 0x7B	; 123
     58c:	b4 e1       	ldi	r27, 0x14	; 20
     58e:	0e 94 a4 08 	call	0x1148	; 0x1148 <__umulhisi3>
     592:	96 95       	lsr	r25
     594:	87 95       	ror	r24
     596:	24 e6       	ldi	r18, 0x64	; 100
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	2c 1b       	sub	r18, r28
     59c:	31 09       	sbc	r19, r1
     59e:	82 9f       	mul	r24, r18
     5a0:	b0 01       	movw	r22, r0
     5a2:	83 9f       	mul	r24, r19
     5a4:	70 0d       	add	r23, r0
     5a6:	92 9f       	mul	r25, r18
     5a8:	70 0d       	add	r23, r0
     5aa:	11 24       	eor	r1, r1
	
	TIMER1->OCRBH = Local_Comp_Value  >> SHIFT_EIGHT;
     5ac:	79 bd       	out	0x29, r23	; 41
	TIMER1->OCRBL = (Local_Comp_Value & LOW_MASK);
     5ae:	68 bd       	out	0x28, r22	; 40
	

	/* Set top value */
	
	TIMER1->ICRH = (Local_Top & HIGH_MASK) >> SHIFT_EIGHT;
     5b0:	57 bd       	out	0x27, r21	; 39
	TIMER1->ICRL = Local_Top & LOW_MASK;
     5b2:	46 bd       	out	0x26, r20	; 38
     TIMER1->ICRL = Local_Top & LOW_MASK;
     #endif
     #endif
	
	
}
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <UART_Init>:

char UART_Receive_Byte(void)
{
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ea 01       	movw	r28, r20
     5be:	dc 01       	movw	r26, r24
     5c0:	cb 01       	movw	r24, r22
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	aa 1f       	adc	r26, r26
     5c8:	bb 1f       	adc	r27, r27
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	aa 1f       	adc	r26, r26
     5d0:	bb 1f       	adc	r27, r27
     5d2:	9c 01       	movw	r18, r24
     5d4:	ad 01       	movw	r20, r26
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	44 1f       	adc	r20, r20
     5dc:	55 1f       	adc	r21, r21
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	44 1f       	adc	r20, r20
     5e4:	55 1f       	adc	r21, r21
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	74 e2       	ldi	r23, 0x24	; 36
     5ea:	84 ef       	ldi	r24, 0xF4	; 244
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 82 08 	call	0x1104	; 0x1104 <__udivmodsi4>
     5f2:	21 50       	subi	r18, 0x01	; 1
     5f4:	31 09       	sbc	r19, r1
     5f6:	8a b1       	in	r24, 0x0a	; 10
     5f8:	88 61       	ori	r24, 0x18	; 24
     5fa:	8a b9       	out	0x0a, r24	; 10
     5fc:	20 97       	sbiw	r28, 0x00	; 0
     5fe:	29 f0       	breq	.+10     	; 0x60a <UART_Init+0x52>
     600:	d0 93 ef 00 	sts	0x00EF, r29	; 0x8000ef <__data_end+0x1>
     604:	c0 93 ee 00 	sts	0x00EE, r28	; 0x8000ee <__data_end>
     608:	57 9a       	sbi	0x0a, 7	; 10
     60a:	30 bd       	out	0x20, r19	; 32
     60c:	29 b9       	out	0x09, r18	; 9
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <UART_Write_Byte>:
     614:	5d 9b       	sbis	0x0b, 5	; 11
     616:	fe cf       	rjmp	.-4      	; 0x614 <UART_Write_Byte>
     618:	8c b9       	out	0x0c, r24	; 12
     61a:	08 95       	ret

0000061c <UART_Write_String>:
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	ec 01       	movw	r28, r24
     622:	88 81       	ld	r24, Y
     624:	88 23       	and	r24, r24
     626:	31 f0       	breq	.+12     	; 0x634 <UART_Write_String+0x18>
     628:	21 96       	adiw	r28, 0x01	; 1
     62a:	0e 94 0a 03 	call	0x614	; 0x614 <UART_Write_Byte>
     62e:	89 91       	ld	r24, Y+
     630:	81 11       	cpse	r24, r1
     632:	fb cf       	rjmp	.-10     	; 0x62a <UART_Write_String+0xe>
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <__vector_13>:



ISR(USART_RXC_vect)
{
     63a:	1f 92       	push	r1
     63c:	0f 92       	push	r0
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	0f 92       	push	r0
     642:	11 24       	eor	r1, r1
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
	UART_Rx_Callback(UDR);
     65c:	8c b1       	in	r24, 0x0c	; 12
     65e:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__data_end>
     662:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <__data_end+0x1>
     666:	09 95       	icall
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <ESP_ReadResponseLine>:
     68a:	8f 92       	push	r8
     68c:	9f 92       	push	r9
     68e:	af 92       	push	r10
     690:	bf 92       	push	r11
     692:	cf 92       	push	r12
     694:	df 92       	push	r13
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	00 91 f9 00 	lds	r16, 0x00F9	; 0x8000f9 <ResponseBufferMain_Index>
     6a4:	00 23       	and	r16, r16
     6a6:	09 f4       	brne	.+2      	; 0x6aa <ESP_ReadResponseLine+0x20>
     6a8:	f6 c0       	rjmp	.+492    	; 0x896 <__stack+0x37>
     6aa:	f0 90 f7 00 	lds	r15, 0x00F7	; 0x8000f7 <CorrectDataReceived>
     6ae:	50 91 f8 00 	lds	r21, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     6b2:	6f ef       	ldi	r22, 0xFF	; 255
     6b4:	60 0f       	add	r22, r16
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	6e 5f       	subi	r22, 0xFE	; 254
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	dd 24       	eor	r13, r13
     6c4:	d3 94       	inc	r13
     6c6:	a0 2f       	mov	r26, r16
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	ed 01       	movw	r28, r26
     6cc:	c7 50       	subi	r28, 0x07	; 7
     6ce:	df 4f       	sbci	r29, 0xFF	; 255
     6d0:	9d 01       	movw	r18, r26
     6d2:	29 50       	subi	r18, 0x09	; 9
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	49 01       	movw	r8, r18
     6d8:	b1 2c       	mov	r11, r1
     6da:	c1 2c       	mov	r12, r1
     6dc:	9c 01       	movw	r18, r24
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	31 09       	sbc	r19, r1
     6e2:	f9 01       	movw	r30, r18
     6e4:	e6 50       	subi	r30, 0x06	; 6
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	40 81       	ld	r20, Z
     6ea:	4f 34       	cpi	r20, 0x4F	; 79
     6ec:	69 f4       	brne	.+26     	; 0x708 <ESP_ReadResponseLine+0x7e>
     6ee:	fc 01       	movw	r30, r24
     6f0:	e6 50       	subi	r30, 0x06	; 6
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	20 81       	ld	r18, Z
     6f6:	2b 34       	cpi	r18, 0x4B	; 75
     6f8:	09 f0       	breq	.+2      	; 0x6fc <ESP_ReadResponseLine+0x72>
     6fa:	c4 c0       	rjmp	.+392    	; 0x884 <__stack+0x25>
     6fc:	28 81       	ld	r18, Y
     6fe:	2d 30       	cpi	r18, 0x0D	; 13
     700:	09 f0       	breq	.+2      	; 0x704 <ESP_ReadResponseLine+0x7a>
     702:	c0 c0       	rjmp	.+384    	; 0x884 <__stack+0x25>
     704:	5d 2d       	mov	r21, r13
     706:	be c0       	rjmp	.+380    	; 0x884 <__stack+0x25>
     708:	f9 01       	movw	r30, r18
     70a:	e6 50       	subi	r30, 0x06	; 6
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	40 81       	ld	r20, Z
     710:	4b 32       	cpi	r20, 0x2B	; 43
     712:	09 f0       	breq	.+2      	; 0x716 <ESP_ReadResponseLine+0x8c>
     714:	59 c0       	rjmp	.+178    	; 0x7c8 <ESP_ReadResponseLine+0x13e>
     716:	fc 01       	movw	r30, r24
     718:	e6 50       	subi	r30, 0x06	; 6
     71a:	ff 4f       	sbci	r31, 0xFF	; 255
     71c:	20 81       	ld	r18, Z
     71e:	29 34       	cpi	r18, 0x49	; 73
     720:	09 f0       	breq	.+2      	; 0x724 <ESP_ReadResponseLine+0x9a>
     722:	45 c0       	rjmp	.+138    	; 0x7ae <ESP_ReadResponseLine+0x124>
     724:	d4 01       	movw	r26, r8
     726:	2c 91       	ld	r18, X
     728:	2b 34       	cpi	r18, 0x4B	; 75
     72a:	09 f0       	breq	.+2      	; 0x72e <ESP_ReadResponseLine+0xa4>
     72c:	ab c0       	rjmp	.+342    	; 0x884 <__stack+0x25>
     72e:	e1 2f       	mov	r30, r17
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	9f 01       	movw	r18, r30
     734:	26 50       	subi	r18, 0x06	; 6
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	d9 01       	movw	r26, r18
     73a:	2c 91       	ld	r18, X
     73c:	2a 33       	cpi	r18, 0x3A	; 58
     73e:	49 f0       	breq	.+18     	; 0x752 <ESP_ReadResponseLine+0xc8>
     740:	1f 5f       	subi	r17, 0xFF	; 255
     742:	e1 2f       	mov	r30, r17
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	df 01       	movw	r26, r30
     748:	a6 50       	subi	r26, 0x06	; 6
     74a:	bf 4f       	sbci	r27, 0xFF	; 255
     74c:	2c 91       	ld	r18, X
     74e:	2a 33       	cpi	r18, 0x3A	; 58
     750:	b9 f7       	brne	.-18     	; 0x740 <ESP_ReadResponseLine+0xb6>
     752:	9f 01       	movw	r18, r30
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	a9 01       	movw	r20, r18
     75a:	46 50       	subi	r20, 0x06	; 6
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	da 01       	movw	r26, r20
     760:	4c 91       	ld	r20, X
     762:	4d 30       	cpi	r20, 0x0D	; 13
     764:	d9 f0       	breq	.+54     	; 0x79c <ESP_ReadResponseLine+0x112>
     766:	4b 2d       	mov	r20, r11
     768:	5c 2d       	mov	r21, r12
     76a:	a1 2c       	mov	r10, r1
     76c:	d9 01       	movw	r26, r18
     76e:	a6 50       	subi	r26, 0x06	; 6
     770:	bf 4f       	sbci	r27, 0xFF	; 255
     772:	2c 91       	ld	r18, X
     774:	da 01       	movw	r26, r20
     776:	a6 50       	subi	r26, 0x06	; 6
     778:	bf 4f       	sbci	r27, 0xFF	; 255
     77a:	2c 93       	st	X, r18
     77c:	a3 94       	inc	r10
     77e:	4a 2d       	mov	r20, r10
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	9a 01       	movw	r18, r20
     784:	2e 0f       	add	r18, r30
     786:	3f 1f       	adc	r19, r31
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	d9 01       	movw	r26, r18
     78e:	a6 50       	subi	r26, 0x06	; 6
     790:	bf 4f       	sbci	r27, 0xFF	; 255
     792:	fc 90       	ld	r15, X
     794:	bd e0       	ldi	r27, 0x0D	; 13
     796:	fb 12       	cpse	r15, r27
     798:	e9 cf       	rjmp	.-46     	; 0x76c <ESP_ReadResponseLine+0xe2>
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <ESP_ReadResponseLine+0x116>
     79c:	4b 2d       	mov	r20, r11
     79e:	5c 2d       	mov	r21, r12
     7a0:	fa 01       	movw	r30, r20
     7a2:	e6 50       	subi	r30, 0x06	; 6
     7a4:	ff 4f       	sbci	r31, 0xFF	; 255
     7a6:	10 82       	st	Z, r1
     7a8:	fd 2c       	mov	r15, r13
     7aa:	5d 2d       	mov	r21, r13
     7ac:	6b c0       	rjmp	.+214    	; 0x884 <__stack+0x25>
     7ae:	fc 01       	movw	r30, r24
     7b0:	e6 50       	subi	r30, 0x06	; 6
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	20 81       	ld	r18, Z
     7b6:	23 34       	cpi	r18, 0x43	; 67
     7b8:	09 f0       	breq	.+2      	; 0x7bc <ESP_ReadResponseLine+0x132>
     7ba:	64 c0       	rjmp	.+200    	; 0x884 <__stack+0x25>
     7bc:	28 81       	ld	r18, Y
     7be:	2d 30       	cpi	r18, 0x0D	; 13
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <ESP_ReadResponseLine+0x13a>
     7c2:	60 c0       	rjmp	.+192    	; 0x884 <__stack+0x25>
     7c4:	5d 2d       	mov	r21, r13
     7c6:	5e c0       	rjmp	.+188    	; 0x884 <__stack+0x25>
     7c8:	f9 01       	movw	r30, r18
     7ca:	e6 50       	subi	r30, 0x06	; 6
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	40 81       	ld	r20, Z
     7d0:	45 34       	cpi	r20, 0x45	; 69
     7d2:	99 f4       	brne	.+38     	; 0x7fa <ESP_ReadResponseLine+0x170>
     7d4:	fc 01       	movw	r30, r24
     7d6:	e6 50       	subi	r30, 0x06	; 6
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	20 81       	ld	r18, Z
     7dc:	22 35       	cpi	r18, 0x52	; 82
     7de:	09 f0       	breq	.+2      	; 0x7e2 <ESP_ReadResponseLine+0x158>
     7e0:	51 c0       	rjmp	.+162    	; 0x884 <__stack+0x25>
     7e2:	28 81       	ld	r18, Y
     7e4:	2d 30       	cpi	r18, 0x0D	; 13
     7e6:	09 f0       	breq	.+2      	; 0x7ea <ESP_ReadResponseLine+0x160>
     7e8:	4d c0       	rjmp	.+154    	; 0x884 <__stack+0x25>
     7ea:	50 93 f8 00 	sts	0x00F8, r21	; 0x8000f8 <ReceivedFullResponse>
     7ee:	f0 92 f7 00 	sts	0x00F7, r15	; 0x8000f7 <CorrectDataReceived>
     7f2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ResponseBufferMain_Index>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	5e c0       	rjmp	.+188    	; 0x8b6 <__stack+0x57>
     7fa:	f9 01       	movw	r30, r18
     7fc:	e6 50       	subi	r30, 0x06	; 6
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	40 81       	ld	r20, Z
     802:	4e 34       	cpi	r20, 0x4E	; 78
     804:	09 f5       	brne	.+66     	; 0x848 <ESP_ReadResponseLine+0x1be>
     806:	fc 01       	movw	r30, r24
     808:	e6 50       	subi	r30, 0x06	; 6
     80a:	ff 4f       	sbci	r31, 0xFF	; 255
     80c:	20 81       	ld	r18, Z
     80e:	2e 34       	cpi	r18, 0x4E	; 78
     810:	c9 f5       	brne	.+114    	; 0x884 <__stack+0x25>
     812:	28 81       	ld	r18, Y
     814:	2d 30       	cpi	r18, 0x0D	; 13
     816:	b1 f5       	brne	.+108    	; 0x884 <__stack+0x25>
     818:	21 2f       	mov	r18, r17
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	e6 50       	subi	r30, 0x06	; 6
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	40 81       	ld	r20, Z
     824:	4c 32       	cpi	r20, 0x2C	; 44
     826:	49 f0       	breq	.+18     	; 0x83a <ESP_ReadResponseLine+0x1b0>
     828:	1f 5f       	subi	r17, 0xFF	; 255
     82a:	21 2f       	mov	r18, r17
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	f9 01       	movw	r30, r18
     830:	e6 50       	subi	r30, 0x06	; 6
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	40 81       	ld	r20, Z
     836:	4c 32       	cpi	r20, 0x2C	; 44
     838:	b9 f7       	brne	.-18     	; 0x828 <ESP_ReadResponseLine+0x19e>
     83a:	1f 5f       	subi	r17, 0xFF	; 255
     83c:	f9 01       	movw	r30, r18
     83e:	e6 50       	subi	r30, 0x06	; 6
     840:	ff 4f       	sbci	r31, 0xFF	; 255
     842:	10 82       	st	Z, r1
     844:	5d 2d       	mov	r21, r13
     846:	1e c0       	rjmp	.+60     	; 0x884 <__stack+0x25>
     848:	f9 01       	movw	r30, r18
     84a:	e6 50       	subi	r30, 0x06	; 6
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	40 81       	ld	r20, Z
     850:	4e 33       	cpi	r20, 0x3E	; 62
     852:	b9 f0       	breq	.+46     	; 0x882 <__stack+0x23>
     854:	f9 01       	movw	r30, r18
     856:	e6 50       	subi	r30, 0x06	; 6
     858:	ff 4f       	sbci	r31, 0xFF	; 255
     85a:	20 81       	ld	r18, Z
     85c:	23 35       	cpi	r18, 0x53	; 83
     85e:	91 f4       	brne	.+36     	; 0x884 <__stack+0x25>
     860:	fc 01       	movw	r30, r24
     862:	e6 50       	subi	r30, 0x06	; 6
     864:	ff 4f       	sbci	r31, 0xFF	; 255
     866:	20 81       	ld	r18, Z
     868:	25 34       	cpi	r18, 0x45	; 69
     86a:	61 f4       	brne	.+24     	; 0x884 <__stack+0x25>
     86c:	fc 01       	movw	r30, r24
     86e:	e6 50       	subi	r30, 0x06	; 6
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	20 81       	ld	r18, Z
     874:	2e 34       	cpi	r18, 0x4E	; 78
     876:	31 f4       	brne	.+12     	; 0x884 <__stack+0x25>
     878:	28 81       	ld	r18, Y
     87a:	2d 30       	cpi	r18, 0x0D	; 13
     87c:	19 f4       	brne	.+6      	; 0x884 <__stack+0x25>
     87e:	5d 2d       	mov	r21, r13
     880:	01 c0       	rjmp	.+2      	; 0x884 <__stack+0x25>
     882:	5d 2d       	mov	r21, r13
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	86 17       	cp	r24, r22
     888:	97 07       	cpc	r25, r23
     88a:	09 f0       	breq	.+2      	; 0x88e <__stack+0x2f>
     88c:	27 cf       	rjmp	.-434    	; 0x6dc <ESP_ReadResponseLine+0x52>
     88e:	50 93 f8 00 	sts	0x00F8, r21	; 0x8000f8 <ReceivedFullResponse>
     892:	f0 92 f7 00 	sts	0x00F7, r15	; 0x8000f7 <CorrectDataReceived>
     896:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     89a:	88 23       	and	r24, r24
     89c:	59 f0       	breq	.+22     	; 0x8b4 <__stack+0x55>
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	80 0f       	add	r24, r16
     8a2:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <ResponseBufferMain_Index>
     8a6:	e0 2f       	mov	r30, r16
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	e6 50       	subi	r30, 0x06	; 6
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	10 82       	st	Z, r1
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	08 95       	ret

000008ce <ESP_FillResponseBuffer>:
     8ce:	e0 91 f9 00 	lds	r30, 0x00F9	; 0x8000f9 <ResponseBufferMain_Index>
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	9e 0f       	add	r25, r30
     8d6:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <ResponseBufferMain_Index>
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e6 50       	subi	r30, 0x06	; 6
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	80 83       	st	Z, r24
     8e2:	9a 3f       	cpi	r25, 0xFA	; 250
     8e4:	11 f4       	brne	.+4      	; 0x8ea <ESP_FillResponseBuffer+0x1c>
     8e6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ResponseBufferMain_Index>
     8ea:	08 95       	ret

000008ec <ESP_ClearResponseBuffer>:
     8ec:	20 91 f9 00 	lds	r18, 0x00F9	; 0x8000f9 <ResponseBufferMain_Index>
     8f0:	22 23       	and	r18, r18
     8f2:	71 f0       	breq	.+28     	; 0x910 <ESP_ClearResponseBuffer+0x24>
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	2f 5f       	subi	r18, 0xFF	; 255
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	fc 01       	movw	r30, r24
     902:	e6 50       	subi	r30, 0x06	; 6
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	10 82       	st	Z, r1
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	c1 f7       	brne	.-16     	; 0x900 <ESP_ClearResponseBuffer+0x14>
     910:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <ResponseBufferMain_Index>
     914:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <ReceivedFullResponse>
     918:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <CorrectDataReceived>
     91c:	08 95       	ret

0000091e <ESP_Enable_multiple_connections>:
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	cd b7       	in	r28, 0x3d	; 61
     928:	de b7       	in	r29, 0x3e	; 62
     92a:	2b 97       	sbiw	r28, 0x0b	; 11
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	8c 01       	movw	r16, r24
     938:	8b e0       	ldi	r24, 0x0B	; 11
     93a:	e9 e8       	ldi	r30, 0x89	; 137
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	de 01       	movw	r26, r28
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <ESP_Enable_multiple_connections+0x24>
     94a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <RequestSent.1811>
     94e:	81 11       	cpse	r24, r1
     950:	45 c0       	rjmp	.+138    	; 0x9dc <ESP_Enable_multiple_connections+0xbe>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <RequestSent.1811>
     958:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	22 23       	and	r18, r18
     960:	a1 f0       	breq	.+40     	; 0x98a <ESP_Enable_multiple_connections+0x6c>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	ef 5f       	subi	r30, 0xFF	; 255
     96a:	dc 01       	movw	r26, r24
     96c:	ac 50       	subi	r26, 0x0C	; 12
     96e:	be 4f       	sbci	r27, 0xFE	; 254
     970:	2c 93       	st	X, r18
     972:	8e 2f       	mov	r24, r30
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a1 e0       	ldi	r26, 0x01	; 1
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	ac 0f       	add	r26, r28
     97c:	bd 1f       	adc	r27, r29
     97e:	a8 0f       	add	r26, r24
     980:	b9 1f       	adc	r27, r25
     982:	2c 91       	ld	r18, X
     984:	21 11       	cpse	r18, r1
     986:	f0 cf       	rjmp	.-32     	; 0x968 <ESP_Enable_multiple_connections+0x4a>
     988:	01 c0       	rjmp	.+2      	; 0x98c <ESP_Enable_multiple_connections+0x6e>
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	d8 01       	movw	r26, r16
     98e:	9c 91       	ld	r25, X
     990:	99 23       	and	r25, r25
     992:	61 f0       	breq	.+24     	; 0x9ac <ESP_Enable_multiple_connections+0x8e>
     994:	11 96       	adiw	r26, 0x01	; 1
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	2e 0f       	add	r18, r30
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	ec 50       	subi	r30, 0x0C	; 12
     99e:	fe 4f       	sbci	r31, 0xFE	; 254
     9a0:	90 83       	st	Z, r25
     9a2:	9d 91       	ld	r25, X+
     9a4:	e2 2f       	mov	r30, r18
     9a6:	91 11       	cpse	r25, r1
     9a8:	f6 cf       	rjmp	.-20     	; 0x996 <ESP_Enable_multiple_connections+0x78>
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <ESP_Enable_multiple_connections+0x90>
     9ac:	2e 2f       	mov	r18, r30
     9ae:	e2 2f       	mov	r30, r18
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	ec 50       	subi	r30, 0x0C	; 12
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	8d e0       	ldi	r24, 0x0D	; 13
     9b8:	80 83       	st	Z, r24
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	e2 0f       	add	r30, r18
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	ec 50       	subi	r30, 0x0C	; 12
     9c2:	fe 4f       	sbci	r31, 0xFE	; 254
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	80 83       	st	Z, r24
     9c8:	2e 5f       	subi	r18, 0xFE	; 254
     9ca:	e2 2f       	mov	r30, r18
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ec 50       	subi	r30, 0x0C	; 12
     9d0:	fe 4f       	sbci	r31, 0xFE	; 254
     9d2:	10 82       	st	Z, r1
     9d4:	84 ef       	ldi	r24, 0xF4	; 244
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     9dc:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     9e0:	88 23       	and	r24, r24
     9e2:	c1 f0       	breq	.+48     	; 0xa14 <ESP_Enable_multiple_connections+0xf6>
     9e4:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	a1 f0       	breq	.+40     	; 0xa14 <ESP_Enable_multiple_connections+0xf6>
     9ec:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     9f0:	88 23       	and	r24, r24
     9f2:	79 f0       	breq	.+30     	; 0xa12 <ESP_Enable_multiple_connections+0xf4>
     9f4:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     9f8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <RequestSent.1811>
     9fc:	bf e1       	ldi	r27, 0x1F	; 31
     9fe:	2f eb       	ldi	r18, 0xBF	; 191
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	b1 50       	subi	r27, 0x01	; 1
     a04:	20 40       	sbci	r18, 0x00	; 0
     a06:	80 40       	sbci	r24, 0x00	; 0
     a08:	e1 f7       	brne	.-8      	; 0xa02 <ESP_Enable_multiple_connections+0xe4>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <ESP_Enable_multiple_connections+0xee>
     a0c:	00 00       	nop
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <ESP_Enable_multiple_connections+0xf6>
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	2b 96       	adiw	r28, 0x0b	; 11
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	cd bf       	out	0x3d, r28	; 61
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <ESP_Configure_As_server>:
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	60 97       	sbiw	r28, 0x10	; 16
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	8c 01       	movw	r16, r24
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	e4 e9       	ldi	r30, 0x94	; 148
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	de 01       	movw	r26, r28
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	01 90       	ld	r0, Z+
     a50:	0d 92       	st	X+, r0
     a52:	8a 95       	dec	r24
     a54:	e1 f7       	brne	.-8      	; 0xa4e <ESP_Configure_As_server+0x24>
     a56:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <RequestSent.1823>
     a5a:	81 11       	cpse	r24, r1
     a5c:	45 c0       	rjmp	.+138    	; 0xae8 <ESP_Configure_As_server+0xbe>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <RequestSent.1823>
     a64:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     a68:	29 81       	ldd	r18, Y+1	; 0x01
     a6a:	22 23       	and	r18, r18
     a6c:	a1 f0       	breq	.+40     	; 0xa96 <ESP_Configure_As_server+0x6c>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	e0 e0       	ldi	r30, 0x00	; 0
     a74:	ef 5f       	subi	r30, 0xFF	; 255
     a76:	dc 01       	movw	r26, r24
     a78:	ac 50       	subi	r26, 0x0C	; 12
     a7a:	be 4f       	sbci	r27, 0xFE	; 254
     a7c:	2c 93       	st	X, r18
     a7e:	8e 2f       	mov	r24, r30
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a1 e0       	ldi	r26, 0x01	; 1
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	ac 0f       	add	r26, r28
     a88:	bd 1f       	adc	r27, r29
     a8a:	a8 0f       	add	r26, r24
     a8c:	b9 1f       	adc	r27, r25
     a8e:	2c 91       	ld	r18, X
     a90:	21 11       	cpse	r18, r1
     a92:	f0 cf       	rjmp	.-32     	; 0xa74 <ESP_Configure_As_server+0x4a>
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <ESP_Configure_As_server+0x6e>
     a96:	e0 e0       	ldi	r30, 0x00	; 0
     a98:	d8 01       	movw	r26, r16
     a9a:	9c 91       	ld	r25, X
     a9c:	99 23       	and	r25, r25
     a9e:	61 f0       	breq	.+24     	; 0xab8 <ESP_Configure_As_server+0x8e>
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	2e 0f       	add	r18, r30
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	ec 50       	subi	r30, 0x0C	; 12
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	90 83       	st	Z, r25
     aae:	9d 91       	ld	r25, X+
     ab0:	e2 2f       	mov	r30, r18
     ab2:	91 11       	cpse	r25, r1
     ab4:	f6 cf       	rjmp	.-20     	; 0xaa2 <ESP_Configure_As_server+0x78>
     ab6:	01 c0       	rjmp	.+2      	; 0xaba <ESP_Configure_As_server+0x90>
     ab8:	2e 2f       	mov	r18, r30
     aba:	e2 2f       	mov	r30, r18
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	ec 50       	subi	r30, 0x0C	; 12
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	8d e0       	ldi	r24, 0x0D	; 13
     ac4:	80 83       	st	Z, r24
     ac6:	e1 e0       	ldi	r30, 0x01	; 1
     ac8:	e2 0f       	add	r30, r18
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	ec 50       	subi	r30, 0x0C	; 12
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	8a e0       	ldi	r24, 0x0A	; 10
     ad2:	80 83       	st	Z, r24
     ad4:	2e 5f       	subi	r18, 0xFE	; 254
     ad6:	e2 2f       	mov	r30, r18
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	ec 50       	subi	r30, 0x0C	; 12
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	10 82       	st	Z, r1
     ae0:	84 ef       	ldi	r24, 0xF4	; 244
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     ae8:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     aec:	88 23       	and	r24, r24
     aee:	c1 f0       	breq	.+48     	; 0xb20 <ESP_Configure_As_server+0xf6>
     af0:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	a1 f0       	breq	.+40     	; 0xb20 <ESP_Configure_As_server+0xf6>
     af8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     afc:	88 23       	and	r24, r24
     afe:	79 f0       	breq	.+30     	; 0xb1e <ESP_Configure_As_server+0xf4>
     b00:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     b04:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <RequestSent.1823>
     b08:	bf e1       	ldi	r27, 0x1F	; 31
     b0a:	2f eb       	ldi	r18, 0xBF	; 191
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	b1 50       	subi	r27, 0x01	; 1
     b10:	20 40       	sbci	r18, 0x00	; 0
     b12:	80 40       	sbci	r24, 0x00	; 0
     b14:	e1 f7       	brne	.-8      	; 0xb0e <ESP_Configure_As_server+0xe4>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <ESP_Configure_As_server+0xee>
     b18:	00 00       	nop
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <ESP_Configure_As_server+0xf6>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	60 96       	adiw	r28, 0x10	; 16
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	08 95       	ret

00000b36 <ESP_SelectMode>:
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	2b 97       	sbiw	r28, 0x0b	; 11
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	18 2f       	mov	r17, r24
     b4e:	8b e0       	ldi	r24, 0x0B	; 11
     b50:	e4 ea       	ldi	r30, 0xA4	; 164
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	de 01       	movw	r26, r28
     b56:	11 96       	adiw	r26, 0x01	; 1
     b58:	01 90       	ld	r0, Z+
     b5a:	0d 92       	st	X+, r0
     b5c:	8a 95       	dec	r24
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <ESP_SelectMode+0x22>
     b60:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <RequestSent.1845>
     b64:	81 11       	cpse	r24, r1
     b66:	3a c0       	rjmp	.+116    	; 0xbdc <ESP_SelectMode+0xa6>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <RequestSent.1845>
     b6e:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     b72:	29 81       	ldd	r18, Y+1	; 0x01
     b74:	22 23       	and	r18, r18
     b76:	a1 f0       	breq	.+40     	; 0xba0 <ESP_SelectMode+0x6a>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	e0 e0       	ldi	r30, 0x00	; 0
     b7e:	ef 5f       	subi	r30, 0xFF	; 255
     b80:	dc 01       	movw	r26, r24
     b82:	ac 50       	subi	r26, 0x0C	; 12
     b84:	be 4f       	sbci	r27, 0xFE	; 254
     b86:	2c 93       	st	X, r18
     b88:	8e 2f       	mov	r24, r30
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a1 e0       	ldi	r26, 0x01	; 1
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	ac 0f       	add	r26, r28
     b92:	bd 1f       	adc	r27, r29
     b94:	a8 0f       	add	r26, r24
     b96:	b9 1f       	adc	r27, r25
     b98:	2c 91       	ld	r18, X
     b9a:	21 11       	cpse	r18, r1
     b9c:	f0 cf       	rjmp	.-32     	; 0xb7e <ESP_SelectMode+0x48>
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <ESP_SelectMode+0x70>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	e0 e0       	ldi	r30, 0x00	; 0
     ba6:	dc 01       	movw	r26, r24
     ba8:	ac 50       	subi	r26, 0x0C	; 12
     baa:	be 4f       	sbci	r27, 0xFE	; 254
     bac:	1c 93       	st	X, r17
     bae:	a1 e0       	ldi	r26, 0x01	; 1
     bb0:	ae 0f       	add	r26, r30
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ac 50       	subi	r26, 0x0C	; 12
     bb6:	be 4f       	sbci	r27, 0xFE	; 254
     bb8:	8d e0       	ldi	r24, 0x0D	; 13
     bba:	8c 93       	st	X, r24
     bbc:	a2 e0       	ldi	r26, 0x02	; 2
     bbe:	ae 0f       	add	r26, r30
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ac 50       	subi	r26, 0x0C	; 12
     bc4:	be 4f       	sbci	r27, 0xFE	; 254
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	8c 93       	st	X, r24
     bca:	ed 5f       	subi	r30, 0xFD	; 253
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	ec 50       	subi	r30, 0x0C	; 12
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	10 82       	st	Z, r1
     bd4:	84 ef       	ldi	r24, 0xF4	; 244
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     bdc:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     be0:	88 23       	and	r24, r24
     be2:	c1 f0       	breq	.+48     	; 0xc14 <ESP_SelectMode+0xde>
     be4:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	a1 f0       	breq	.+40     	; 0xc14 <ESP_SelectMode+0xde>
     bec:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     bf0:	88 23       	and	r24, r24
     bf2:	79 f0       	breq	.+30     	; 0xc12 <ESP_SelectMode+0xdc>
     bf4:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     bf8:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <RequestSent.1845>
     bfc:	2f e1       	ldi	r18, 0x1F	; 31
     bfe:	8f eb       	ldi	r24, 0xBF	; 191
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	21 50       	subi	r18, 0x01	; 1
     c04:	80 40       	sbci	r24, 0x00	; 0
     c06:	90 40       	sbci	r25, 0x00	; 0
     c08:	e1 f7       	brne	.-8      	; 0xc02 <ESP_SelectMode+0xcc>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <ESP_SelectMode+0xd6>
     c0c:	00 00       	nop
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <ESP_SelectMode+0xde>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	2b 96       	adiw	r28, 0x0b	; 11
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	08 95       	ret

00000c28 <ESP_CreateAccesPoint>:
     c28:	af 92       	push	r10
     c2a:	bf 92       	push	r11
     c2c:	cf 92       	push	r12
     c2e:	df 92       	push	r13
     c30:	ef 92       	push	r14
     c32:	ff 92       	push	r15
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	2b 97       	sbiw	r28, 0x0b	; 11
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	5c 01       	movw	r10, r24
     c4e:	6b 01       	movw	r12, r22
     c50:	7a 01       	movw	r14, r20
     c52:	89 01       	movw	r16, r18
     c54:	8b e0       	ldi	r24, 0x0B	; 11
     c56:	ef ea       	ldi	r30, 0xAF	; 175
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	de 01       	movw	r26, r28
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	01 90       	ld	r0, Z+
     c60:	0d 92       	st	X+, r0
     c62:	8a 95       	dec	r24
     c64:	e1 f7       	brne	.-8      	; 0xc5e <ESP_CreateAccesPoint+0x36>
     c66:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <RequestSent.1857>
     c6a:	81 11       	cpse	r24, r1
     c6c:	a1 c0       	rjmp	.+322    	; 0xdb0 <ESP_CreateAccesPoint+0x188>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <RequestSent.1857>
     c74:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     c78:	9e 01       	movw	r18, r28
     c7a:	2f 5f       	subi	r18, 0xFF	; 255
     c7c:	3f 4f       	sbci	r19, 0xFF	; 255
     c7e:	ae 01       	movw	r20, r28
     c80:	44 5f       	subi	r20, 0xF4	; 244
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	f9 01       	movw	r30, r18
     c86:	df 01       	movw	r26, r30
     c88:	a2 1b       	sub	r26, r18
     c8a:	b3 0b       	sbc	r27, r19
     c8c:	81 91       	ld	r24, Z+
     c8e:	ac 50       	subi	r26, 0x0C	; 12
     c90:	be 4f       	sbci	r27, 0xFE	; 254
     c92:	8c 93       	st	X, r24
     c94:	e4 17       	cp	r30, r20
     c96:	f5 07       	cpc	r31, r21
     c98:	b1 f7       	brne	.-20     	; 0xc86 <ESP_CreateAccesPoint+0x5e>
     c9a:	d5 01       	movw	r26, r10
     c9c:	8c 91       	ld	r24, X
     c9e:	88 23       	and	r24, r24
     ca0:	89 f0       	breq	.+34     	; 0xcc4 <ESP_CreateAccesPoint+0x9c>
     ca2:	bf ef       	ldi	r27, 0xFF	; 255
     ca4:	ab 1a       	sub	r10, r27
     ca6:	bb 0a       	sbc	r11, r27
     ca8:	ea e0       	ldi	r30, 0x0A	; 10
     caa:	a1 e0       	ldi	r26, 0x01	; 1
     cac:	ae 0f       	add	r26, r30
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	ec 50       	subi	r30, 0x0C	; 12
     cb2:	fe 4f       	sbci	r31, 0xFE	; 254
     cb4:	80 83       	st	Z, r24
     cb6:	f5 01       	movw	r30, r10
     cb8:	81 91       	ld	r24, Z+
     cba:	5f 01       	movw	r10, r30
     cbc:	ea 2f       	mov	r30, r26
     cbe:	81 11       	cpse	r24, r1
     cc0:	f4 cf       	rjmp	.-24     	; 0xcaa <ESP_CreateAccesPoint+0x82>
     cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <ESP_CreateAccesPoint+0x9e>
     cc4:	aa e0       	ldi	r26, 0x0A	; 10
     cc6:	ea 2f       	mov	r30, r26
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	ec 50       	subi	r30, 0x0C	; 12
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	82 e2       	ldi	r24, 0x22	; 34
     cd0:	80 83       	st	Z, r24
     cd2:	e1 e0       	ldi	r30, 0x01	; 1
     cd4:	ea 0f       	add	r30, r26
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ec 50       	subi	r30, 0x0C	; 12
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	9c e2       	ldi	r25, 0x2C	; 44
     cde:	90 83       	st	Z, r25
     ce0:	e3 e0       	ldi	r30, 0x03	; 3
     ce2:	ea 0f       	add	r30, r26
     ce4:	ae 5f       	subi	r26, 0xFE	; 254
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ac 50       	subi	r26, 0x0C	; 12
     cea:	be 4f       	sbci	r27, 0xFE	; 254
     cec:	8c 93       	st	X, r24
     cee:	d6 01       	movw	r26, r12
     cf0:	8c 91       	ld	r24, X
     cf2:	88 23       	and	r24, r24
     cf4:	61 f0       	breq	.+24     	; 0xd0e <ESP_CreateAccesPoint+0xe6>
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	9e 0f       	add	r25, r30
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	ec 50       	subi	r30, 0x0C	; 12
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	80 83       	st	Z, r24
     d04:	8d 91       	ld	r24, X+
     d06:	e9 2f       	mov	r30, r25
     d08:	81 11       	cpse	r24, r1
     d0a:	f6 cf       	rjmp	.-20     	; 0xcf8 <ESP_CreateAccesPoint+0xd0>
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <ESP_CreateAccesPoint+0xe8>
     d0e:	9e 2f       	mov	r25, r30
     d10:	e9 2f       	mov	r30, r25
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ec 50       	subi	r30, 0x0C	; 12
     d16:	fe 4f       	sbci	r31, 0xFE	; 254
     d18:	82 e2       	ldi	r24, 0x22	; 34
     d1a:	80 83       	st	Z, r24
     d1c:	e2 e0       	ldi	r30, 0x02	; 2
     d1e:	e9 0f       	add	r30, r25
     d20:	a1 e0       	ldi	r26, 0x01	; 1
     d22:	a9 0f       	add	r26, r25
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ac 50       	subi	r26, 0x0C	; 12
     d28:	be 4f       	sbci	r27, 0xFE	; 254
     d2a:	8c e2       	ldi	r24, 0x2C	; 44
     d2c:	8c 93       	st	X, r24
     d2e:	d7 01       	movw	r26, r14
     d30:	8c 91       	ld	r24, X
     d32:	88 23       	and	r24, r24
     d34:	61 f0       	breq	.+24     	; 0xd4e <ESP_CreateAccesPoint+0x126>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	9e 0f       	add	r25, r30
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ec 50       	subi	r30, 0x0C	; 12
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	80 83       	st	Z, r24
     d44:	8d 91       	ld	r24, X+
     d46:	e9 2f       	mov	r30, r25
     d48:	81 11       	cpse	r24, r1
     d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <ESP_CreateAccesPoint+0x110>
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <ESP_CreateAccesPoint+0x128>
     d4e:	9e 2f       	mov	r25, r30
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	e9 0f       	add	r30, r25
     d54:	a9 2f       	mov	r26, r25
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	ac 50       	subi	r26, 0x0C	; 12
     d5a:	be 4f       	sbci	r27, 0xFE	; 254
     d5c:	8c e2       	ldi	r24, 0x2C	; 44
     d5e:	8c 93       	st	X, r24
     d60:	d8 01       	movw	r26, r16
     d62:	8c 91       	ld	r24, X
     d64:	88 23       	and	r24, r24
     d66:	61 f0       	breq	.+24     	; 0xd80 <ESP_CreateAccesPoint+0x158>
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9e 0f       	add	r25, r30
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	ec 50       	subi	r30, 0x0C	; 12
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	80 83       	st	Z, r24
     d76:	8d 91       	ld	r24, X+
     d78:	e9 2f       	mov	r30, r25
     d7a:	81 11       	cpse	r24, r1
     d7c:	f6 cf       	rjmp	.-20     	; 0xd6a <ESP_CreateAccesPoint+0x142>
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <ESP_CreateAccesPoint+0x15a>
     d80:	9e 2f       	mov	r25, r30
     d82:	e9 2f       	mov	r30, r25
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ec 50       	subi	r30, 0x0C	; 12
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	8d e0       	ldi	r24, 0x0D	; 13
     d8c:	80 83       	st	Z, r24
     d8e:	e1 e0       	ldi	r30, 0x01	; 1
     d90:	e9 0f       	add	r30, r25
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	ec 50       	subi	r30, 0x0C	; 12
     d96:	fe 4f       	sbci	r31, 0xFE	; 254
     d98:	8a e0       	ldi	r24, 0x0A	; 10
     d9a:	80 83       	st	Z, r24
     d9c:	9e 5f       	subi	r25, 0xFE	; 254
     d9e:	e9 2f       	mov	r30, r25
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ec 50       	subi	r30, 0x0C	; 12
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	10 82       	st	Z, r1
     da8:	84 ef       	ldi	r24, 0xF4	; 244
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     db0:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     db4:	88 23       	and	r24, r24
     db6:	c1 f0       	breq	.+48     	; 0xde8 <ESP_CreateAccesPoint+0x1c0>
     db8:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	a1 f0       	breq	.+40     	; 0xde8 <ESP_CreateAccesPoint+0x1c0>
     dc0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     dc4:	88 23       	and	r24, r24
     dc6:	79 f0       	breq	.+30     	; 0xde6 <ESP_CreateAccesPoint+0x1be>
     dc8:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     dcc:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <RequestSent.1857>
     dd0:	bf e1       	ldi	r27, 0x1F	; 31
     dd2:	ef eb       	ldi	r30, 0xBF	; 191
     dd4:	f2 e0       	ldi	r31, 0x02	; 2
     dd6:	b1 50       	subi	r27, 0x01	; 1
     dd8:	e0 40       	sbci	r30, 0x00	; 0
     dda:	f0 40       	sbci	r31, 0x00	; 0
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <ESP_CreateAccesPoint+0x1ae>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <ESP_CreateAccesPoint+0x1b8>
     de0:	00 00       	nop
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <ESP_CreateAccesPoint+0x1c0>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	2b 96       	adiw	r28, 0x0b	; 11
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	08 95       	ret

00000e0a <ESP_StartServer>:
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	85 ec       	ldi	r24, 0xC5	; 197
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 8f 04 	call	0x91e	; 0x91e <ESP_Enable_multiple_connections>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	d1 f7       	brne	.-12     	; 0xe10 <ESP_StartServer+0x6>
     e1c:	ce 01       	movw	r24, r28
     e1e:	0e 94 15 05 	call	0xa2a	; 0xa2a <ESP_Configure_As_server>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	d9 f7       	brne	.-10     	; 0xe1c <ESP_StartServer+0x12>
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <ESP_SendData>:
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	2e 97       	sbiw	r28, 0x0e	; 14
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	8c 01       	movw	r16, r24
     e4a:	7b 01       	movw	r14, r22
     e4c:	8e e0       	ldi	r24, 0x0E	; 14
     e4e:	ed ed       	ldi	r30, 0xDD	; 221
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	de 01       	movw	r26, r28
     e54:	11 96       	adiw	r26, 0x01	; 1
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	8a 95       	dec	r24
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <ESP_SendData+0x2a>
     e5e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <RequestSent.1920>
     e62:	81 11       	cpse	r24, r1
     e64:	40 c0       	rjmp	.+128    	; 0xee6 <ESP_SendData+0xba>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <RequestSent.1920>
     e6c:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     e70:	9e 01       	movw	r18, r28
     e72:	2f 5f       	subi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	ae 01       	movw	r20, r28
     e78:	41 5f       	subi	r20, 0xF1	; 241
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	f9 01       	movw	r30, r18
     e7e:	df 01       	movw	r26, r30
     e80:	a2 1b       	sub	r26, r18
     e82:	b3 0b       	sbc	r27, r19
     e84:	81 91       	ld	r24, Z+
     e86:	ac 50       	subi	r26, 0x0C	; 12
     e88:	be 4f       	sbci	r27, 0xFE	; 254
     e8a:	8c 93       	st	X, r24
     e8c:	e4 17       	cp	r30, r20
     e8e:	f5 07       	cpc	r31, r21
     e90:	b1 f7       	brne	.-20     	; 0xe7e <ESP_SendData+0x52>
     e92:	f7 01       	movw	r30, r14
     e94:	80 81       	ld	r24, Z
     e96:	88 23       	and	r24, r24
     e98:	71 f0       	breq	.+28     	; 0xeb6 <ESP_SendData+0x8a>
     e9a:	d7 01       	movw	r26, r14
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	ed e0       	ldi	r30, 0x0D	; 13
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	9e 0f       	add	r25, r30
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	ec 50       	subi	r30, 0x0C	; 12
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
     eaa:	80 83       	st	Z, r24
     eac:	8d 91       	ld	r24, X+
     eae:	e9 2f       	mov	r30, r25
     eb0:	81 11       	cpse	r24, r1
     eb2:	f6 cf       	rjmp	.-20     	; 0xea0 <ESP_SendData+0x74>
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <ESP_SendData+0x8c>
     eb6:	9d e0       	ldi	r25, 0x0D	; 13
     eb8:	e9 2f       	mov	r30, r25
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ec 50       	subi	r30, 0x0C	; 12
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	8d e0       	ldi	r24, 0x0D	; 13
     ec2:	80 83       	st	Z, r24
     ec4:	e1 e0       	ldi	r30, 0x01	; 1
     ec6:	e9 0f       	add	r30, r25
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ec 50       	subi	r30, 0x0C	; 12
     ecc:	fe 4f       	sbci	r31, 0xFE	; 254
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	80 83       	st	Z, r24
     ed2:	9e 5f       	subi	r25, 0xFE	; 254
     ed4:	e9 2f       	mov	r30, r25
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ec 50       	subi	r30, 0x0C	; 12
     eda:	fe 4f       	sbci	r31, 0xFE	; 254
     edc:	10 82       	st	Z, r1
     ede:	84 ef       	ldi	r24, 0xF4	; 244
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     ee6:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     eea:	88 23       	and	r24, r24
     eec:	d9 f0       	breq	.+54     	; 0xf24 <ESP_SendData+0xf8>
     eee:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	b9 f0       	breq	.+46     	; 0xf24 <ESP_SendData+0xf8>
     ef6:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     efa:	88 23       	and	r24, r24
     efc:	91 f0       	breq	.+36     	; 0xf22 <ESP_SendData+0xf6>
     efe:	c8 01       	movw	r24, r16
     f00:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
     f04:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     f08:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <RequestSent.1920>
     f0c:	ff e1       	ldi	r31, 0x1F	; 31
     f0e:	2f eb       	ldi	r18, 0xBF	; 191
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	f1 50       	subi	r31, 0x01	; 1
     f14:	20 40       	sbci	r18, 0x00	; 0
     f16:	80 40       	sbci	r24, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <ESP_SendData+0xe6>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <ESP_SendData+0xf0>
     f1c:	00 00       	nop
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <ESP_SendData+0xf8>
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	2e 96       	adiw	r28, 0x0e	; 14
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <ESP_ReceiveData>:
     f3e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <RequestSent.1931>
     f42:	81 11       	cpse	r24, r1
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <ESP_ReceiveData+0x12>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <RequestSent.1931>
     f4c:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     f50:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     f54:	88 23       	and	r24, r24
     f56:	d9 f1       	breq	.+118    	; 0xfce <ESP_ReceiveData+0x90>
     f58:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	d1 f1       	breq	.+116    	; 0xfd4 <ESP_ReceiveData+0x96>
     f60:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
     f64:	88 23       	and	r24, r24
     f66:	c9 f1       	breq	.+114    	; 0xfda <ESP_ReceiveData+0x9c>
     f68:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <CorrectDataReceived>
     f6c:	88 23       	and	r24, r24
     f6e:	c1 f1       	breq	.+112    	; 0xfe0 <ESP_ReceiveData+0xa2>
     f70:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <TempResponseBuffer>
     f74:	88 23       	and	r24, r24
     f76:	a9 f0       	breq	.+42     	; 0xfa2 <ESP_ReceiveData+0x64>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	e6 50       	subi	r30, 0x06	; 6
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	30 81       	ld	r19, Z
     f86:	fc 01       	movw	r30, r24
     f88:	e2 51       	subi	r30, 0x12	; 18
     f8a:	fd 4f       	sbci	r31, 0xFD	; 253
     f8c:	30 83       	st	Z, r19
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	82 2f       	mov	r24, r18
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	fc 01       	movw	r30, r24
     f96:	e6 50       	subi	r30, 0x06	; 6
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	30 81       	ld	r19, Z
     f9c:	31 11       	cpse	r19, r1
     f9e:	ef cf       	rjmp	.-34     	; 0xf7e <ESP_ReceiveData+0x40>
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <ESP_ReceiveData+0x68>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	e2 51       	subi	r30, 0x12	; 18
     faa:	fd 4f       	sbci	r31, 0xFD	; 253
     fac:	10 82       	st	Z, r1
     fae:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
     fb2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <RequestSent.1931>
     fb6:	2f e1       	ldi	r18, 0x1F	; 31
     fb8:	8f eb       	ldi	r24, 0xBF	; 191
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	80 40       	sbci	r24, 0x00	; 0
     fc0:	90 40       	sbci	r25, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <ESP_ReceiveData+0x7e>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <ESP_ReceiveData+0x88>
     fc6:	00 00       	nop
     fc8:	8e ee       	ldi	r24, 0xEE	; 238
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	08 95       	ret
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	08 95       	ret
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	08 95       	ret
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	08 95       	ret
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	08 95       	ret

00000fe6 <ESP_InitTest>:
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	00 d0       	rcall	.+0      	; 0xfec <ESP_InitTest+0x6>
     fec:	1f 92       	push	r1
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	81 e4       	ldi	r24, 0x41	; 65
     ff4:	94 e5       	ldi	r25, 0x54	; 84
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	1b 82       	std	Y+3, r1	; 0x03
     ffc:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <RequestSent.1939>
    1000:	81 11       	cpse	r24, r1
    1002:	34 c0       	rjmp	.+104    	; 0x106c <ESP_InitTest+0x86>
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <RequestSent.1939>
    100a:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
    100e:	29 81       	ldd	r18, Y+1	; 0x01
    1010:	22 23       	and	r18, r18
    1012:	a1 f0       	breq	.+40     	; 0x103c <ESP_InitTest+0x56>
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	e0 e0       	ldi	r30, 0x00	; 0
    101a:	ef 5f       	subi	r30, 0xFF	; 255
    101c:	dc 01       	movw	r26, r24
    101e:	ac 50       	subi	r26, 0x0C	; 12
    1020:	be 4f       	sbci	r27, 0xFE	; 254
    1022:	2c 93       	st	X, r18
    1024:	8e 2f       	mov	r24, r30
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a1 e0       	ldi	r26, 0x01	; 1
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ac 0f       	add	r26, r28
    102e:	bd 1f       	adc	r27, r29
    1030:	a8 0f       	add	r26, r24
    1032:	b9 1f       	adc	r27, r25
    1034:	2c 91       	ld	r18, X
    1036:	21 11       	cpse	r18, r1
    1038:	f0 cf       	rjmp	.-32     	; 0x101a <ESP_InitTest+0x34>
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <ESP_InitTest+0x5c>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	e0 e0       	ldi	r30, 0x00	; 0
    1042:	dc 01       	movw	r26, r24
    1044:	ac 50       	subi	r26, 0x0C	; 12
    1046:	be 4f       	sbci	r27, 0xFE	; 254
    1048:	2d e0       	ldi	r18, 0x0D	; 13
    104a:	2c 93       	st	X, r18
    104c:	a1 e0       	ldi	r26, 0x01	; 1
    104e:	ae 0f       	add	r26, r30
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ac 50       	subi	r26, 0x0C	; 12
    1054:	be 4f       	sbci	r27, 0xFE	; 254
    1056:	8a e0       	ldi	r24, 0x0A	; 10
    1058:	8c 93       	st	X, r24
    105a:	ee 5f       	subi	r30, 0xFE	; 254
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ec 50       	subi	r30, 0x0C	; 12
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	10 82       	st	Z, r1
    1064:	84 ef       	ldi	r24, 0xF4	; 244
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 0e 03 	call	0x61c	; 0x61c <UART_Write_String>
    106c:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
    1070:	88 23       	and	r24, r24
    1072:	c1 f0       	breq	.+48     	; 0x10a4 <ESP_InitTest+0xbe>
    1074:	0e 94 45 03 	call	0x68a	; 0x68a <ESP_ReadResponseLine>
    1078:	82 30       	cpi	r24, 0x02	; 2
    107a:	a1 f0       	breq	.+40     	; 0x10a4 <ESP_InitTest+0xbe>
    107c:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <ReceivedFullResponse>
    1080:	88 23       	and	r24, r24
    1082:	79 f0       	breq	.+30     	; 0x10a2 <ESP_InitTest+0xbc>
    1084:	0e 94 76 04 	call	0x8ec	; 0x8ec <ESP_ClearResponseBuffer>
    1088:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <RequestSent.1939>
    108c:	2f e1       	ldi	r18, 0x1F	; 31
    108e:	8f eb       	ldi	r24, 0xBF	; 191
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	21 50       	subi	r18, 0x01	; 1
    1094:	80 40       	sbci	r24, 0x00	; 0
    1096:	90 40       	sbci	r25, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <ESP_InitTest+0xac>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <ESP_InitTest+0xb6>
    109c:	00 00       	nop
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <ESP_InitTest+0xbe>
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <WIFI_Service_Start>:
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	7b 01       	movw	r14, r22
    10be:	8a 01       	movw	r16, r20
    10c0:	e9 01       	movw	r28, r18
    10c2:	81 11       	cpse	r24, r1
    10c4:	18 c0       	rjmp	.+48     	; 0x10f6 <WIFI_Service_Start+0x46>
    10c6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <ESP_InitTest>
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <WIFI_Service_Start+0x16>
    10ce:	82 e3       	ldi	r24, 0x32	; 50
    10d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <ESP_SelectMode>
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	d9 f7       	brne	.-10     	; 0x10ce <WIFI_Service_Start+0x1e>
    10d8:	c7 01       	movw	r24, r14
    10da:	0e 94 05 07 	call	0xe0a	; 0xe0a <ESP_StartServer>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	d9 f7       	brne	.-10     	; 0x10d8 <WIFI_Service_Start+0x28>
    10e2:	2b ee       	ldi	r18, 0xEB	; 235
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	45 ec       	ldi	r20, 0xC5	; 197
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	be 01       	movw	r22, r28
    10ec:	c8 01       	movw	r24, r16
    10ee:	0e 94 14 06 	call	0xc28	; 0xc28 <ESP_CreateAccesPoint>
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	b1 f7       	brne	.-20     	; 0x10e2 <WIFI_Service_Start+0x32>
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	08 95       	ret

00001104 <__udivmodsi4>:
    1104:	a1 e2       	ldi	r26, 0x21	; 33
    1106:	1a 2e       	mov	r1, r26
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	fd 01       	movw	r30, r26
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__udivmodsi4_ep>

00001110 <__udivmodsi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	ee 1f       	adc	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	a2 17       	cp	r26, r18
    111a:	b3 07       	cpc	r27, r19
    111c:	e4 07       	cpc	r30, r20
    111e:	f5 07       	cpc	r31, r21
    1120:	20 f0       	brcs	.+8      	; 0x112a <__udivmodsi4_ep>
    1122:	a2 1b       	sub	r26, r18
    1124:	b3 0b       	sbc	r27, r19
    1126:	e4 0b       	sbc	r30, r20
    1128:	f5 0b       	sbc	r31, r21

0000112a <__udivmodsi4_ep>:
    112a:	66 1f       	adc	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	1a 94       	dec	r1
    1134:	69 f7       	brne	.-38     	; 0x1110 <__udivmodsi4_loop>
    1136:	60 95       	com	r22
    1138:	70 95       	com	r23
    113a:	80 95       	com	r24
    113c:	90 95       	com	r25
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	bd 01       	movw	r22, r26
    1144:	cf 01       	movw	r24, r30
    1146:	08 95       	ret

00001148 <__umulhisi3>:
    1148:	a2 9f       	mul	r26, r18
    114a:	b0 01       	movw	r22, r0
    114c:	b3 9f       	mul	r27, r19
    114e:	c0 01       	movw	r24, r0
    1150:	a3 9f       	mul	r26, r19
    1152:	70 0d       	add	r23, r0
    1154:	81 1d       	adc	r24, r1
    1156:	11 24       	eor	r1, r1
    1158:	91 1d       	adc	r25, r1
    115a:	b2 9f       	mul	r27, r18
    115c:	70 0d       	add	r23, r0
    115e:	81 1d       	adc	r24, r1
    1160:	11 24       	eor	r1, r1
    1162:	91 1d       	adc	r25, r1
    1164:	08 95       	ret

00001166 <_exit>:
    1166:	f8 94       	cli

00001168 <__stop_program>:
    1168:	ff cf       	rjmp	.-2      	; 0x1168 <__stop_program>
