
timer_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a48  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070f  00000000  00000000  000016e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e2  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a6  00000000  00000000  000022d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  74:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
		return (Get_Bit(PIND,(PinNum-PORTD_START)));
	}
	return FALSE;
}
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	00 f5       	brcc	.+64     	; 0xc0 <DIO_WritePin+0x44>
  80:	66 23       	and	r22, r22
  82:	81 f0       	breq	.+32     	; 0xa4 <DIO_WritePin+0x28>
  84:	61 30       	cpi	r22, 0x01	; 1
  86:	09 f0       	breq	.+2      	; 0x8a <DIO_WritePin+0xe>
  88:	88 c0       	rjmp	.+272    	; 0x19a <DIO_WritePin+0x11e>
  8a:	4b b3       	in	r20, 0x1b	; 27
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	b9 01       	movw	r22, r18
  92:	02 c0       	rjmp	.+4      	; 0x98 <DIO_WritePin+0x1c>
  94:	66 0f       	add	r22, r22
  96:	77 1f       	adc	r23, r23
  98:	8a 95       	dec	r24
  9a:	e2 f7       	brpl	.-8      	; 0x94 <DIO_WritePin+0x18>
  9c:	cb 01       	movw	r24, r22
  9e:	84 2b       	or	r24, r20
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret
  a4:	4b b3       	in	r20, 0x1b	; 27
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_WritePin+0x36>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_WritePin+0x32>
  b6:	cb 01       	movw	r24, r22
  b8:	80 95       	com	r24
  ba:	84 23       	and	r24, r20
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	08 95       	ret
  c0:	98 ef       	ldi	r25, 0xF8	; 248
  c2:	98 0f       	add	r25, r24
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	08 f5       	brcc	.+66     	; 0x10a <DIO_WritePin+0x8e>
  c8:	66 23       	and	r22, r22
  ca:	81 f0       	breq	.+32     	; 0xec <DIO_WritePin+0x70>
  cc:	61 30       	cpi	r22, 0x01	; 1
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_WritePin+0x56>
  d0:	64 c0       	rjmp	.+200    	; 0x19a <DIO_WritePin+0x11e>
  d2:	48 b3       	in	r20, 0x18	; 24
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	b9 01       	movw	r22, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_WritePin+0x64>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	9a 95       	dec	r25
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_WritePin+0x60>
  e4:	cb 01       	movw	r24, r22
  e6:	84 2b       	or	r24, r20
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	08 95       	ret
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	88 50       	subi	r24, 0x08	; 8
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_WritePin+0x80>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_WritePin+0x7c>
 100:	cb 01       	movw	r24, r22
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	88 bb       	out	0x18, r24	; 24
 108:	08 95       	ret
 10a:	90 ef       	ldi	r25, 0xF0	; 240
 10c:	98 0f       	add	r25, r24
 10e:	99 30       	cpi	r25, 0x09	; 9
 110:	08 f5       	brcc	.+66     	; 0x154 <DIO_WritePin+0xd8>
 112:	66 23       	and	r22, r22
 114:	81 f0       	breq	.+32     	; 0x136 <DIO_WritePin+0xba>
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	09 f0       	breq	.+2      	; 0x11c <DIO_WritePin+0xa0>
 11a:	3f c0       	rjmp	.+126    	; 0x19a <DIO_WritePin+0x11e>
 11c:	45 b3       	in	r20, 0x15	; 21
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	b9 01       	movw	r22, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_WritePin+0xae>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	9a 95       	dec	r25
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_WritePin+0xaa>
 12e:	cb 01       	movw	r24, r22
 130:	84 2b       	or	r24, r20
 132:	85 bb       	out	0x15, r24	; 21
 134:	08 95       	ret
 136:	45 b3       	in	r20, 0x15	; 21
 138:	80 51       	subi	r24, 0x10	; 16
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	b9 01       	movw	r22, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_WritePin+0xca>
 142:	66 0f       	add	r22, r22
 144:	77 1f       	adc	r23, r23
 146:	8a 95       	dec	r24
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_WritePin+0xc6>
 14a:	cb 01       	movw	r24, r22
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret
 154:	97 ee       	ldi	r25, 0xE7	; 231
 156:	98 0f       	add	r25, r24
 158:	97 30       	cpi	r25, 0x07	; 7
 15a:	f8 f4       	brcc	.+62     	; 0x19a <DIO_WritePin+0x11e>
 15c:	66 23       	and	r22, r22
 15e:	79 f0       	breq	.+30     	; 0x17e <DIO_WritePin+0x102>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	d9 f4       	brne	.+54     	; 0x19a <DIO_WritePin+0x11e>
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xf6>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xf2>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret
 17e:	42 b3       	in	r20, 0x12	; 18
 180:	89 51       	subi	r24, 0x19	; 25
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	b9 01       	movw	r22, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_WritePin+0x112>
 18a:	66 0f       	add	r22, r22
 18c:	77 1f       	adc	r23, r23
 18e:	8a 95       	dec	r24
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_WritePin+0x10e>
 192:	cb 01       	movw	r24, r22
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	82 bb       	out	0x12, r24	; 18
 19a:	08 95       	ret

0000019c <DIO_SetPinDirection>:
* function job :- determine direction of specified pin                                                  *
* function arguments :- pin number and desired direction (I/O)                                          *
* function return :-            N/A                                                                     *
*********************************************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	if(PinNum >=PORTA_START && PinNum <=PORTA_END){
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	00 f5       	brcc	.+64     	; 0x1e0 <DIO_SetPinDirection+0x44>
		switch(PinDirection){
 1a0:	66 23       	and	r22, r22
 1a2:	81 f0       	breq	.+32     	; 0x1c4 <DIO_SetPinDirection+0x28>
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	09 f0       	breq	.+2      	; 0x1aa <DIO_SetPinDirection+0xe>
 1a8:	88 c0       	rjmp	.+272    	; 0x2ba <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRA,PinNum);
 1aa:	4a b3       	in	r20, 0x1a	; 26
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	b9 01       	movw	r22, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_SetPinDirection+0x1c>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_SetPinDirection+0x18>
 1bc:	cb 01       	movw	r24, r22
 1be:	84 2b       	or	r24, r20
 1c0:	8a bb       	out	0x1a, r24	; 26
			break;
 1c2:	08 95       	ret
			case LOW : Clear_Bit(DDRA,PinNum);
 1c4:	4a b3       	in	r20, 0x1a	; 26
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinDirection+0x36>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	8a 95       	dec	r24
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinDirection+0x32>
 1d6:	cb 01       	movw	r24, r22
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	8a bb       	out	0x1a, r24	; 26
			break;
 1de:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTB_START && PinNum <=PORTB_END){
 1e0:	98 ef       	ldi	r25, 0xF8	; 248
 1e2:	98 0f       	add	r25, r24
 1e4:	98 30       	cpi	r25, 0x08	; 8
 1e6:	08 f5       	brcc	.+66     	; 0x22a <DIO_SetPinDirection+0x8e>
		switch(PinDirection){
 1e8:	66 23       	and	r22, r22
 1ea:	81 f0       	breq	.+32     	; 0x20c <DIO_SetPinDirection+0x70>
 1ec:	61 30       	cpi	r22, 0x01	; 1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <DIO_SetPinDirection+0x56>
 1f0:	64 c0       	rjmp	.+200    	; 0x2ba <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRB,(PinNum-PORTB_START));
 1f2:	47 b3       	in	r20, 0x17	; 23
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	b9 01       	movw	r22, r18
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_SetPinDirection+0x64>
 1fc:	66 0f       	add	r22, r22
 1fe:	77 1f       	adc	r23, r23
 200:	9a 95       	dec	r25
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_SetPinDirection+0x60>
 204:	cb 01       	movw	r24, r22
 206:	84 2b       	or	r24, r20
 208:	87 bb       	out	0x17, r24	; 23
			break;
 20a:	08 95       	ret
			case LOW : Clear_Bit(DDRB,(PinNum-PORTB_START));
 20c:	47 b3       	in	r20, 0x17	; 23
 20e:	88 50       	subi	r24, 0x08	; 8
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinDirection+0x80>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinDirection+0x7c>
 220:	cb 01       	movw	r24, r22
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	87 bb       	out	0x17, r24	; 23
			break;
 228:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTC_START && PinNum <=PORTC_END){
 22a:	90 ef       	ldi	r25, 0xF0	; 240
 22c:	98 0f       	add	r25, r24
 22e:	99 30       	cpi	r25, 0x09	; 9
 230:	08 f5       	brcc	.+66     	; 0x274 <DIO_SetPinDirection+0xd8>
		switch(PinDirection){
 232:	66 23       	and	r22, r22
 234:	81 f0       	breq	.+32     	; 0x256 <DIO_SetPinDirection+0xba>
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	09 f0       	breq	.+2      	; 0x23c <DIO_SetPinDirection+0xa0>
 23a:	3f c0       	rjmp	.+126    	; 0x2ba <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRC,(PinNum-PORTC_START));
 23c:	44 b3       	in	r20, 0x14	; 20
 23e:	21 e0       	ldi	r18, 0x01	; 1
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	b9 01       	movw	r22, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinDirection+0xae>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	9a 95       	dec	r25
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinDirection+0xaa>
 24e:	cb 01       	movw	r24, r22
 250:	84 2b       	or	r24, r20
 252:	84 bb       	out	0x14, r24	; 20
			break;
 254:	08 95       	ret
			case LOW : Clear_Bit(DDRC,(PinNum-PORTC_START));
 256:	44 b3       	in	r20, 0x14	; 20
 258:	80 51       	subi	r24, 0x10	; 16
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_SetPinDirection+0xca>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	8a 95       	dec	r24
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_SetPinDirection+0xc6>
 26a:	cb 01       	movw	r24, r22
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	84 bb       	out	0x14, r24	; 20
			break;
 272:	08 95       	ret
			default :
			break ;
		}
	}
	else if(PinNum >=PORTD_START && PinNum <=PORTD_END){
 274:	97 ee       	ldi	r25, 0xE7	; 231
 276:	98 0f       	add	r25, r24
 278:	97 30       	cpi	r25, 0x07	; 7
 27a:	f8 f4       	brcc	.+62     	; 0x2ba <DIO_SetPinDirection+0x11e>
		switch(PinDirection){
 27c:	66 23       	and	r22, r22
 27e:	79 f0       	breq	.+30     	; 0x29e <DIO_SetPinDirection+0x102>
 280:	61 30       	cpi	r22, 0x01	; 1
 282:	d9 f4       	brne	.+54     	; 0x2ba <DIO_SetPinDirection+0x11e>
			case HIGH : Set_Bit(DDRD,(PinNum-PORTD_START));
 284:	41 b3       	in	r20, 0x11	; 17
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinDirection+0xf6>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	9a 95       	dec	r25
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinDirection+0xf2>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	81 bb       	out	0x11, r24	; 17
			break;
 29c:	08 95       	ret
			case LOW : Clear_Bit(DDRD,(PinNum-PORTD_START));
 29e:	41 b3       	in	r20, 0x11	; 17
 2a0:	89 51       	subi	r24, 0x19	; 25
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	b9 01       	movw	r22, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_SetPinDirection+0x112>
 2aa:	66 0f       	add	r22, r22
 2ac:	77 1f       	adc	r23, r23
 2ae:	8a 95       	dec	r24
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_SetPinDirection+0x10e>
 2b2:	cb 01       	movw	r24, r22
 2b4:	80 95       	com	r24
 2b6:	84 23       	and	r24, r20
 2b8:	81 bb       	out	0x11, r24	; 17
 2ba:	08 95       	ret

000002bc <INT2_init>:
/* Function outputs :- N/A                                                                              */
/*********************************************************************************************************/
void INT2_init(void)
{
	/* declaring pb2 as input pin */
	DIO_SetPinDirection(10,LOW);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_WritePin(10,HIGH);
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	/* enable module interrupt */
	Set_Bit(GICR,INT2);
 2cc:	8b b7       	in	r24, 0x3b	; 59
 2ce:	80 62       	ori	r24, 0x20	; 32
 2d0:	8b bf       	out	0x3b, r24	; 59
	/* rising edge will activate interrupt */
	Set_Bit(MCUCSR,ISC2);
 2d2:	84 b7       	in	r24, 0x34	; 52
 2d4:	80 64       	ori	r24, 0x40	; 64
 2d6:	84 bf       	out	0x34, r24	; 52
	//SREG |= (1<<7);
	sei();
 2d8:	78 94       	sei
 2da:	08 95       	ret

000002dc <__vector_3>:
/* Function job :- writing isr code for interrupt 2                                                      */
/* Function inputs :- N/A                                                                                */
/* Function outputs :- N/A                                                                               */
/*********************************************************************************************************/
ISR(INT2_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	8f 93       	push	r24
	g_flag_int2 ++;
 2e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
	
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <main>:
extern volatile uint8 g_flag_int2   ;
extern volatile uint8 g_flag ;

int main(void)
{
    DIO_SetPinDirection(led0,HIGH);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_SetPinDirection(led1,HIGH);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	DIO_SetPinDirection(led2,HIGH);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8e e0       	ldi	r24, 0x0E	; 14
 312:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
	timer_init(OCR_1ms);
 316:	8a ef       	ldi	r24, 0xFA	; 250
 318:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <timer_init>
	INT2_init();
 31c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <INT2_init>
	
	
	
    while (TRUE) 
    {
		DIO_WritePin(led0,HIGH);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	8c e0       	ldi	r24, 0x0C	; 12
 324:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		
		while(! (g_flag == FALSE) );
 328:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_flag>
 32c:	81 11       	cpse	r24, r1
 32e:	fc cf       	rjmp	.-8      	; 0x328 <main+0x2a>
		g_flag = FALSE;		
 330:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_flag>
		DIO_WritePin(led0,LOW);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(led2,HIGH);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	8e e0       	ldi	r24, 0x0E	; 14
 340:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		while(! (g_flag == FALSE));
 344:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_flag>
 348:	81 11       	cpse	r24, r1
 34a:	fc cf       	rjmp	.-8      	; 0x344 <main+0x46>
		g_flag = FALSE;
 34c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_flag>
		
		DIO_WritePin(led2,LOW);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8e e0       	ldi	r24, 0x0E	; 14
 354:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(led1,HIGH);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	8d e0       	ldi	r24, 0x0D	; 13
 35c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		while( ! (g_flag == FALSE));
 360:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_flag>
 364:	81 11       	cpse	r24, r1
 366:	fc cf       	rjmp	.-8      	; 0x360 <main+0x62>
		g_flag = FALSE;
 368:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_flag>
		
		DIO_WritePin(led1,LOW);
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	8d e0       	ldi	r24, 0x0D	; 13
 370:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		/* this when bush button is pressed turn on stop led and wait a sec then return  */
		if(g_flag_int2 == TRUE){
 374:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	91 f6       	brne	.-92     	; 0x320 <main+0x22>
			DIO_WritePin(led2,HIGH);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8e e0       	ldi	r24, 0x0E	; 14
 380:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(led1,LOW);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8d e0       	ldi	r24, 0x0D	; 13
 388:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(led0,LOW);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
          while( ! (g_flag == FALSE));
 394:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_flag>
 398:	81 11       	cpse	r24, r1
 39a:	fc cf       	rjmp	.-8      	; 0x394 <main+0x96>
           g_flag = FALSE;
 39c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_flag>
			g_flag_int2 = FALSE;
 3a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 3a4:	bd cf       	rjmp	.-134    	; 0x320 <main+0x22>

000003a6 <timer_init>:
/*********************************************************************************************************/

void timer_init(uint8 OCR_value)
{
	/* FRC0 = 1 & CTC MODE IS ON & PRECSACLE 64 & interrupt enable*/
	Set_Bit(TIMSK,OCIE0);
 3a6:	99 b7       	in	r25, 0x39	; 57
 3a8:	92 60       	ori	r25, 0x02	; 2
 3aa:	99 bf       	out	0x39, r25	; 57
	TCCR0 |= (TRUE<<FOC0) | (TRUE<<WGM01) |(TRUE<<CS00) | (TRUE<<CS01);
 3ac:	93 b7       	in	r25, 0x33	; 51
 3ae:	9b 68       	ori	r25, 0x8B	; 139
 3b0:	93 bf       	out	0x33, r25	; 51
	TCNT0 = FALSE;
 3b2:	12 be       	out	0x32, r1	; 50
	OCR0 = OCR_value;
 3b4:	8c bf       	out	0x3c, r24	; 60
	sei();
 3b6:	78 94       	sei
 3b8:	08 95       	ret

000003ba <__vector_10>:
}



ISR(TIMER0_COMP_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
	g_flag ++ ;
 3c6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_flag>
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_flag>
}
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
